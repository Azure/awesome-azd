[
  {
    "title": "Starter - Bicep",
    "description": "A starter template with Bicep as infrastructure provider",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/azd-starter-bicep",
    "tags": [
      "bicep",
      "msft"
    ],
    "id": "99c380c4-915a-41b2-9517-45ed63d7ef7f"
  },
  {
    "title": "Starter - Terraform",
    "description": "A starter template with Terraform as infrastructure provider",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/azd-starter-terraform",
    "tags": [
      "terraform",
      "msft"
    ],
    "id": "23ccf0c3-8850-4593-805e-6a0fd42c1093"
  },
  {
    "title": "WordPress with Azure Container Apps",
    "description": "A blueprint to easily and quickly create and deploy your first scalable and secure WordPress site to Azure, leveraging Azure Container Apps with Azure Database for MariaDb.",
    "preview": "./templates/images/apptemplate-wordpress-on-ACA.png",
    "authorUrl": "https://github.com/kpantos",
    "author": "Konstantinos Pantos",
    "source": "https://github.com/Azure-Samples/apptemplate-wordpress-on-ACA",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "aca",
      "agw",
      "rediscache",
      "monitor",
      "keyvault"
    ],
    "id": "729d2ab2-7326-4cdd-81be-540e4bc7c8c7",
    "languages": [
      "php",
      "javascript"
    ]
  },
  {
    "title": "React Web App with C# API and MongoDB",
    "description": "A blueprint for getting a React web app with a C# API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly.",
    "preview": "./templates/images/todo-csharp.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-csharp-cosmos-sql",
    "tags": [
      "mongodb",
      "reactjs",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "cosmosdb",
      "monitor",
      "keyvault"
    ],
    "id": "406a5813-bd0b-4b4f-81c4-37e726edce4a",
    "languages": [
      "dotnetCsharp",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Rock, Paper, Orleans (RPO) - Distributed .NET",
    "description": "Rock, Paper, Orleans (RPO) is a game built using dotnet, Orleans, and runs in Azure.The idea behind RPO is that you write a \"player bot\" in which you implement your player logic.",
    "preview": "./templates/images/rock-paper-orleans.png",
    "authorUrl": "https://rockpaperorleans.net/",
    "author": "Brady Gaster",
    "source": "https://github.com/bradygaster/RockPaperOrleans",
    "tags": [
      "bicep",
      "community"
    ],
    "azureServices": [
      "cosmosdb",
      "aca"
    ],
    "id": "01b5c589-eb46-4fc1-b6ed-6f9315276f8b",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Scalable Django on Azure App Service",
    "description": "Deploy your Django web application with Microsoft Azure, for scale, using a cloud architecture with integrated monitoring and load testing.",
    "preview": "./templates/images/pycon-django.png",
    "authorUrl": "https://github.com/tonybaloney",
    "author": "Anthony Shaw",
    "source": "https://github.com/tonybaloney/django-on-azure",
    "tags": [
      "django",
      "webapps",
      "bicep",
      "community"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "vnets"
    ],
    "id": "d4f1b8d9-98b3-4f72-8f97-11a365ea11b0",
    "languages": [
      "python"
    ]
  },
  {
    "title": "React Web App with Node.js API and MongoDB",
    "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-nodejs-mongo.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-nodejs-mongo",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "cosmosdb",
      "monitor",
      "keyvault"
    ],
    "id": "d2fbf0ef-693e-48f2-be36-05053201807f",
    "languages": [
      "nodejs",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Static React Web App + Functions with Node.js API and MongoDB",
    "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting static web apps with serverless logic and functionality.",
    "preview": "./templates/images/todo-nodejs-mongo-swa-func.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-swa-func",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "swa",
      "functions",
      "cosmosdb",
      "monitor",
      "keyvault",
      "appservice"
    ],
    "id": "ada236c1-2d00-440e-9730-5042a283a409",
    "languages": [
      "nodejs",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Static React Web App + Functions with Python API and MongoDB",
    "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The frontend, currently a ToDo application, is designed as a placeholder that can easily be removed and replaced with your own frontend code. This architecture is for hosting static web apps with serverless logic and functionality.",
    "preview": "./templates/images/todo-python-mongo-swa-func.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-python-mongo-swa-func",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "fastapi",
      "msft"
    ],
    "azureServices": [
      "swa",
      "functions",
      "cosmosdb",
      "monitor",
      "keyvault",
      "appservice"
    ],
    "id": "deb89dec-3275-48e5-b5c0-830fb59743e6",
    "languages": [
      "python",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "React Web App with Python API and MongoDB - Terraform",
    "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Terraform) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-python-terraform.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-python-mongo-terraform",
    "tags": [
      "mongodb",
      "reactjs",
      "terraform",
      "fastapi",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "monitor",
      "keyvault",
      "appservice"
    ],
    "id": "f36282ac-e3db-475a-8030-ede81da41eb4",
    "languages": [
      "python",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "React Web App with Node.js API and MongoDB - Terraform",
    "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Terraform) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-nodejs-mongo-terraform.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-terraform",
    "tags": [
      "mongodb",
      "reactjs",
      "terraform",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "monitor",
      "keyvault",
      "appservice"
    ],
    "id": "523cbcd0-e0c3-44e1-b552-abf9b12ed577",
    "languages": [
      "nodejs",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "React Web App with Python API and MongoDB",
    "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-python.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-python-mongo",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "fastapi",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "cosmosdb",
      "monitor",
      "keyvault"
    ],
    "id": "75e7c4ea-205e-4480-a7e2-ddf7d64b4c60",
    "languages": [
      "python",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Containerized React Web App with Node.js API and MongoDB",
    "description": "A blueprint for getting a React web app with a Node.js API and a MongoDB database onto Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running containerized apps or microservices on a serverless platform   This architecture is for running containerized microservices without managing the servers.",
    "preview": "./templates/images/todo-node-aca.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-aca",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "cosmosdb",
      "monitor",
      "keyvault",
      "aca"
    ],
    "id": "3ae2b74c-3d7c-45d3-abae-7b43b7ada8f8",
    "languages": [
      "nodejs",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Containerized React Web App with Python API and MongoDB",
    "description": "A blueprint for getting a React.js web app with Python (FastAPI) API and a MongoDB API in Cosmos database onto Azure. The frontend, currently a ToDo application, is designed as a placeholder that can easily be removed and replaced with your own frontend code. This architecture is for running containerized apps or microservices on a serverless platform.",
    "preview": "./templates/images/todo-python-aca.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-python-mongo-aca",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "fastapi",
      "msft"
    ],
    "azureServices": [
      "aca",
      "cosmosdb",
      "monitor",
      "keyvault"
    ],
    "id": "855fbaa1-e251-469e-8d9d-c4eb0a1ef9bd",
    "languages": [
      "python",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "React Web App with C# API and SQL Database ",
    "description": "A blueprint for getting a React web app with a C# API and a SQL database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly.",
    "preview": "./templates/images/todo-csharp-sql.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-csharp-sql",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "azuresql",
      "monitor",
      "keyvault"
    ],
    "id": "29fda7be-7cb8-4871-8186-91b140afe497",
    "languages": [
      "dotnetCsharp",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "React Web App with Java API and MongoDB ",
    "description": "A blueprint for getting a React.js web app with a Java API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-java-mongo.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-java-mongo",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "cosmosdb",
      "keyvault",
      "monitor"
    ],
    "id": "d0aa5618-2e2a-4a1c-af41-29218ab7c1db",
    "languages": [
      "java",
      "typescript"
    ]
  },
  {
    "title": "Containerized React Web App with Java API and MongoDB",
    "description": "A blueprint for getting a React web app with a Java API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running containerized apps or microservices on a serverless platform.",
    "preview": "./templates/images/todo-java-mongo-aca.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-java-mongo-aca",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "aca",
      "cosmosdb",
      "keyvault",
      "monitor"
    ],
    "id": "3ffcef92-73e6-49ec-9c35-22a5cfc6ee98",
    "languages": [
      "java",
      "typescript"
    ]
  },
  {
    "title": "Static React Web App + Functions with C# API and SQL Database",
    "description": "A blueprint for getting a React web app with a C# API and a SQL database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting static web apps with serverless logic and functionality.",
    "preview": "./templates/images/todo-csharp-sql-swa-func.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-csharp-sql-swa-func",
    "tags": [
      "bicep",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "swa",
      "functions",
      "monitor",
      "keyvault",
      "appservice",
      "azuresql"
    ],
    "id": "5ea70efc-3ac9-4ce5-87c9-d68200336a89",
    "languages": [
      "dotnetCsharp",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Kubernetes React Web App with Node.js API and MongoDB",
    "description": "A blueprint for getting a React.js web app with a Node.js API and a MongoDB database on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for running Kubernetes clusters without setting up the control plane.",
    "preview": "./templates/images/todo-nodejs-mongo-aks.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/todo-nodejs-mongo-aks",
    "tags": [
      "bicep",
      "mongodb",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "monitor",
      "keyvault",
      "appservice",
      "cosmosdb",
      "aks"
    ],
    "id": "f9936700-5a9a-4bf9-bfe7-e1e10477ba76",
    "languages": [
      "nodejs",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Static React Web App with Java API and PostgreSQL",
    "description": "A blueprint for getting a React web app with a Java API and a Azure Database for PostgreSQL - Flexible Server on Azure. The blueprint includes sample application code (a ToDo web app) which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get up and running quickly. This architecture is for hosting web apps and APIs without worrying about the infrastructure.",
    "preview": "./templates/images/todo-java-postgres-asa.png",
    "authorUrl": "https://github.com/Azure-Samples/",
    "author": "Yi Liu",
    "source": "https://github.com/Azure-Samples/ASA-Samples-Web-Application",
    "tags": [
      "bicep",
      "spring",
      "webapps",
      "msft"
    ],
    "azureServices": [
      "azurespringapps",
      "azuredb-postgreSQL"
    ],
    "id": "0c5072fa-a12c-4a5f-a821-ead605c1d10c",
    "languages": [
      "java",
      "nodejs"
    ]
  },
  {
    "title": "ChatGPT + Enterprise Data with Azure OpenAI and AI Search",
    "description": "A sample app for the Retrieval-Augmented Generation pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences.",
    "preview": "./templates/images/chatgpt-enterprise-dotnet.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/azure-search-openai-demo-csharp",
    "tags": [
      "bicep",
      "kubernetes",
      "gpt",
      "ai",
      "msft",
      "popular",
      "aicollection"
    ],
    "azureServices": [
      "aks",
      "aca",
      "aisearch",
      "openai",
      "rediscache"
    ],
    "id": "75989eb4-f7e0-4dab-be54-262775942d4e",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Simple Chat Application using Azure OpenAI",
    "description": "A sample chat app that uses Python and the Flask framework to stream ChatGPT completions as server-sent events to a simple frontend.",
    "preview": "./templates/images/simplechat-azureopenai.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/chatgpt-quickstart",
    "tags": [
      "bicep",
      "gpt",
      "ai",
      "flask",
      "msft"
    ],
    "azureServices": [
      "openai",
      "aca"
    ],
    "id": "b9dc8b04-ecb2-4484-9241-0ec5dcacbdb4",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Spring ChatGPT Application using Azure OpenAI on Azure Spring Apps",
    "description": "A sample that uses Java Spring framework to build ChatGPT-style application running in Azure Spring Apps.",
    "preview": "./templates/images/asa-chatgpt.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Yi Liu",
    "source": "https://github.com/Azure-Samples/spring-chatgpt-sample",
    "tags": [
      "bicep",
      "gpt",
      "ai",
      "msft"
    ],
    "azureServices": [
      "openai",
      "blobstorage",
      "azurespringapps"
    ],
    "id": "609fce57-2f3e-44d7-9fec-162f91fd1f42",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Python (Django) Web App with PostgreSQL in VNet",
    "description": "A restaurants review web app that uses whitenoise for static assets and PostgreSQL for the database. Ready for deployment on App Service with a PostgreSQL Flexible Server inside a VNet.",
    "preview": "./templates/images/msdocs-django-postgresql-sample-app.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/msdocs-django-postgresql-sample-app",
    "tags": [
      "django",
      "webapps",
      "msft",
      "popular"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "appservice",
      "vnets"
    ],
    "id": "aca56c78-0e01-4525-b678-c3d5c28be1be",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Python (Django) Web App with PostgreSQL via Azure Container Apps",
    "description": "A space tourism web app that uses PostgreSQL for the database. The web app is containerize and deploy with Azure Container Apps with secrets managed by Azure Key Vault",
    "preview": "./templates/images/azure-django-postgres-aca.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/azure-django-postgres-aca",
    "tags": [
      "django",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "aca",
      "azuredb-postgreSQL"
    ],
    "id": "0b2fbaad-df80-4f21-a10c-a2739e0fd35b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Python (Flask) Web App with PostgreSQL in VNet",
    "description": "A restaurants review web app with a PostgreSQL database, written in the Python Flask framework plus SQL-Alchemy plus Alembic for database interactions. Ready for deployment on App Service with a PostgreSQL Flexible Server inside a VNet.",
    "preview": "./templates/images/msdocs-flask-postgresql-sample-app.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/msdocs-flask-postgresql-sample-app",
    "tags": [
      "webapps",
      "flask",
      "msft",
      "popular"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "appservice",
      "vnets"
    ],
    "id": "96511c7b-bcc2-45e3-b7f9-254e3104a185",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Microservices App - Dapr PubSub C# ACA ServiceBus",
    "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/pubsub-dapr-csharp-servicebus",
    "tags": [
      "bicep",
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca",
      "servicebus"
    ],
    "id": "b3c37e46-c66a-4a6f-ac07-825f8d9e4af9",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Microservices App - Dapr PubSub Python ACA ServiceBus",
    "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/pubsub-dapr-python-servicebus",
    "tags": [
      "bicep",
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca",
      "servicebus"
    ],
    "id": "43a132f8-f6a3-4896-ae9c-a670157a7e77",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Microservices App - Dapr PubSub Node.js ACA ServiceBus",
    "description": "A complete microservice application featuring Dapr Pub-Sub, deployed to Azure Container Apps and Azure Service Bus Topics with dead-lettering support.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/pubsub-dapr-nodejs-servicebus",
    "tags": [
      "bicep",
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca",
      "servicebus"
    ],
    "id": "a23f5ea7-2d36-4642-9b61-99c9367e54b3",
    "languages": [
      "javascript",
      "nodejs"
    ]
  },
  {
    "title": "Microservices App - Dapr Bindings Cron C# ACA PostgreSQL",
    "description": "Create microservice to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a PostgreSQL output binding.",
    "preview": "./templates/images/bindings-dapr-cron-postgres.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/bindings-dapr-csharp-cron-postgres",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "aca"
    ],
    "id": "eb747c5a-e95f-4859-bb21-b1aef740684a",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Microservices App - Dapr Bindings Cron Python ACA PostgreSQL",
    "description": "Create a microservice app to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a postgreSQL output binding.",
    "preview": "./templates/images/bindings-dapr-cron-postgres.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/bindings-dapr-python-cron-postgres",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "aca"
    ],
    "id": "9736cc49-7b91-4a54-b8a1-86a5c609765e",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Microservices App - Dapr Bindings Cron Node.js ACA PostgreSQL",
    "description": "Create a microservice app to demonstrate Dapr's bindings API to work with external systems as inputs and outputs. The service listens to input binding events from a system CRON and then outputs the contents of local data to a postgreSQL output binding.",
    "preview": "./templates/images/bindings-dapr-cron-postgres.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/bindings-dapr-nodejs-cron-postgres",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "aca"
    ],
    "id": "bb2a0e5f-cb80-4501-b699-6c6b36a87c8d",
    "languages": [
      "nodejs",
      "javascript"
    ]
  },
  {
    "title": "Microservices App - Dapr Service Invoke Node.js ACA",
    "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
    "preview": "./templates/images/svc-invoke-dapr.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/svc-invoke-dapr-nodejs",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "aa44bec0-701a-4702-a105-f301e2c05b73",
    "languages": [
      "nodejs"
    ]
  },
  {
    "title": "Microservices App - Dapr Service Invoke Python ACA",
    "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
    "preview": "./templates/images/svc-invoke-dapr.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/svc-invoke-dapr-python",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "89d40b9e-b02c-4ed7-82c4-b4a3bed80706",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Microservices App - Dapr Service Invoke C# ACA",
    "description": "Create two microservices that communicate using Dapr's Service Invocation API. The Service Invocation API enables your applications to communicate reliably and securely by leveraging auto-mTLS and built-in retries.",
    "preview": "./templates/images/svc-invoke-dapr.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/svc-invoke-dapr-csharp",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "4aa93d14-9bf2-4dbc-a7f5-0f8796d922f1",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "ChatGPT + Enterprise data with Azure OpenAI and AI Search",
    "description": "A sample app for the Retrieval-Augmented Generation pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences.",
    "preview": "./templates/images/azure-search-openai-demo-appcomponents.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/azure-search-openai-demo",
    "tags": [
      "gpt",
      "bicep",
      "ai",
      "msft",
      "popular",
      "aicollection"
    ],
    "azureServices": [
      "openai",
      "aisearch",
      "blobstorage",
      "appservice",
      "speechservice"
    ],
    "id": "5f6de8e1-9742-4888-ae09-30347b4f4445",
    "languages": [
      "python",
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "FastAPI on Azure Functions",
    "description": "A simple FastAPI app deployed to Azure Functions. Can also be run and debugged locally with the Azure Functions Core Tool emulator.",
    "preview": "./templates/images/fastapi-on-azure-functions.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/fastapi-on-azure-functions",
    "tags": [
      "fastapi",
      "msft"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "fcfd9b78-5e57-467e-a6e0-46cb54d1e246",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Spring PetClinic - Java Spring MySQL",
    "description": "Spring PetClinic application using a set of Azure solutions. Azure App Service for app hosting, Azure Database for MySQL for storage, Azure Key Vault for securing secret and Azure Application Insights for monitoring and logging.",
    "preview": "./templates/images/spring-petclinic-java-mysql.png",
    "authorUrl": "https://github.com/wangmingliang-ms",
    "author": "Miller Wang",
    "source": "https://github.com/Azure-Samples/spring-petclinic-java-mysql",
    "tags": [
      "bicep",
      "spring",
      "thymeleaf",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "azuresql",
      "monitor",
      "keyvault",
      "appinsights"
    ],
    "id": "fc267cdd-831c-4e2d-b86f-2b5af58f1876",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Event Driven Java Application with Azure Service Bus on Azure Spring Apps",
    "description": "A complete event-driven application that includes everything you need to build, deploy, and monitor an Azure solution. ",
    "preview": "./templates/images/event-driven-spring-apps.png",
    "authorUrl": "https://github.com/Azure-Samples/",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/ASA-Samples-Event-Driven-Application",
    "tags": [
      "bicep",
      "spring",
      "msft"
    ],
    "azureServices": [
      "servicebus",
      "monitor",
      "keyvault",
      "azurespringapps"
    ],
    "id": "6631fe19-f77a-4f1e-8b06-759bc7648b60",
    "languages": [
      "java"
    ]
  },
  {
    "title": "SAP Cloud SDK on Azure App Service Quickstart (TypeScript)",
    "description": "This repos serves as quick-start project showcasing SAP Cloud SDK for JavaScript OData consumption running on Azure App Services. Its primary purpose is to set you up for success for your SAP extension project on Azure and reduce the lead time to your first successful deployment as much as possible with developer friendly commands.",
    "preview": "./templates/images/app-service-javascript-sap-cloud-sdk-quickstart.png",
    "authorUrl": "https://github.com/MartinPankraz, https://github.com/lechnerc77",
    "author": "Martin Pankraz, Christian Lechner",
    "source": "https://github.com/Azure-Samples/app-service-javascript-sap-cloud-sdk-quickstart",
    "tags": [
      "bicep",
      "webapps",
      "nestjs",
      "sap",
      "sapcloudsdk",
      "msft"
    ],
    "azureServices": [
      "apim",
      "keyvault",
      "appinsights"
    ],
    "id": "bcb1fed3-63ff-4f1b-a72b-638f548651bf",
    "languages": [
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "Service Bus messages processing to Dataverse",
    "description": "Starter solution to process Service Bus messages to Dataverse, C# for the Azure Functions app processing the messages, Azure Service Bus for the reception of the messages, and Azure Monitor for monitoring and logging.",
    "preview": "./templates/images/servicebus-csharp-function-dataverse.jpg",
    "authorUrl": "https://github.com/rpothin",
    "author": "Raphael Pothin",
    "source": "https://github.com/rpothin/servicebus-csharp-function-dataverse",
    "tags": [
      "dataverse",
      "community"
    ],
    "azureServices": [
      "functions",
      "servicebus",
      "monitor",
      "keyvault"
    ],
    "id": "c5301f33-e7d0-4a18-9588-c3f1eff51845",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "AZD Simple Flask app on Azure App Service",
    "description": "A tiny, no-frills, template to deploy Python's Flask web framework to Azure App Service in the free tier.",
    "preview": "./templates/images/simple-flask-azd.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Anthony Shaw",
    "source": "https://github.com/Azure-Samples/azd-simple-flask-appservice",
    "tags": [
      "flask",
      "msft"
    ],
    "azureServices": [
      "appservice"
    ],
    "id": "147a3984-3705-4972-8c24-159495676ccc",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Functions - Text Summarization using AI Cognitive Language Service (C#-Isolated)",
    "description": "This sample shows how to take text documents as a input via BlobTrigger, does Text Summarization processing using the AI Congnitive Language service, and then outputs to another text document using BlobOutput binding.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/function-csharp-ai-textsummarize",
    "tags": [
      "ai",
      "msft"
    ],
    "azureServices": [
      "functions",
      "aisearch",
      "azureai"
    ],
    "id": "3dae246d-17c8-4af7-a74d-cc6ece82921b",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Functions - Text Summarization using AI Cognitive Language Service (Python v2 Function)",
    "description": "This sample shows how to take text documents as a input via BlobTrigger, does Text Summarization processing using the AI Congnitive Language service, and then outputs to another text document using BlobOutput binding.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/function-python-ai-textsummarize",
    "tags": [
      "ai",
      "msft"
    ],
    "azureServices": [
      "functions",
      "aisearch",
      "azureai"
    ],
    "id": "8d50865f-60f3-4a78-b00c-c185a984cc9a",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Flask Container with CDN",
    "description": "A simple pos website written with Python Flask and Bootstrap. Can be run locally with Docker and then deployed to Azure Container Apps with an Azure CDN in front.",
    "preview": "./templates/images/flask-cdn-container-app.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/flask-gallery-container-app",
    "tags": [
      "flask",
      "webapps",
      "community"
    ],
    "azureServices": [
      "aca",
      "azurecdn"
    ],
    "id": "a0bf9e18-e7f4-426b-8dd4-295c1d4397b6",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Flask Surveys Container App",
    "description": "A survey app written with the Python Flask framework which uses Flask-SQLAlchemy with a PostgreSQL database. Can be developed locally with Docker Compose and then deployed to Azure Container Apps (using KeyVault SDK for Flask secrets).",
    "preview": "./templates/images/flask-surveys-container-app.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/flask-surveys-container-app",
    "tags": [
      "flask",
      "webapps",
      "community"
    ],
    "azureServices": [
      "keyvault",
      "aca",
      "azuredb-postgreSQL"
    ],
    "id": "3173285e-2b3c-4021-b21b-6876adb4d172",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Flask API on Azure Container Apps",
    "description": "A simple JSON API using the Python Flask framework, designed for deployment on Azure Container Apps.",
    "preview": "./templates/images/simple-flask-api-container.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/simple-flask-api-container",
    "tags": [
      "bicep",
      "flask",
      "community"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "a7276a20-b29f-44e2-8d63-1cdaf2cc766b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "FastAPI with API Management",
    "description": "A FastAPI app deployed as a secured Azure Function with an API Management Policy in front, set up such that API calls require a subscription key but auto-generated documentation is publicly viewable. Project also includes 100% test coverage with Pytest plus a development workflow with ruff, isort, and black.",
    "preview": "./templates/images/fastapi-azure-function-apim.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/fastapi-azure-function-apim",
    "tags": [
      "fastapi",
      "community"
    ],
    "azureServices": [
      "functions",
      "apim"
    ],
    "id": "a7dc66c7-4c9f-4897-971c-1bc740859fdc",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Flask Chart API on ACA and CDN",
    "description": "A Charts API that renders PNGs of bar and pie charts, built with Python Flask, APIFlask, and matplotlib. Can be run locally with Docker and then deployed to Azure Container Apps with an Azure CDN in front.",
    "preview": "./templates/images/flask-cdn-container-app.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/flask-charts-api-container-app",
    "tags": [
      "flask",
      "webapps",
      "community"
    ],
    "azureServices": [
      "aca",
      "azurecdn"
    ],
    "id": "fbc313cc-bcc9-46e9-9a97-54c3cbaf0bc3",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Static Maps API Function and CDN",
    "description": "A FastAPI app that renders map images for the given location. Deployed as a secured Azure function with an Azure CDN in front for caching.",
    "preview": "./templates/images/staticmaps-function.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/staticmaps-function",
    "tags": [
      "fastapi",
      "community"
    ],
    "azureServices": [
      "functions",
      "monitor",
      "azurecdn"
    ],
    "id": "a9bf70a0-b36b-4553-91dd-8d4c2f15f052",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Jupyter Notebooks Web App on Azure Container Apps",
    "description": "A web application used for hosting, sharing, and interacting with Jupyter Notebooks via Mercury, hosted on Azure Container Apps.",
    "preview": "./templates/images/jupyter-mercury-aca.png",
    "authorUrl": "https://github.com/savannahostrowski",
    "author": "Savannah Ostrowski",
    "source": "https://github.com/savannahostrowski/jupyter-mercury-aca",
    "tags": [
      "bicep",
      "webapps",
      "jupyter",
      "datascience",
      "community"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "a4418f19-3320-4fd7-b567-46f6856c1c48",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Python (Django) Web App with PostgreSQL and Key Vault",
    "description": "A Python Django app on App Service with a PostgreSQL flexible server database. Database access is restricted to Azure IPs, and all administrative secrets are stored in Key Vault.",
    "preview": "./templates/images/django-quiz-app.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/django-quiz-app",
    "tags": [
      "django",
      "webapps",
      "bicep",
      "community"
    ],
    "azureServices": [
      "appservice",
      "azuredb-postgreSQL",
      "keyvault"
    ],
    "id": "f8ac8c5b-c769-4c68-9a9c-487aeaedd2fb",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Reliable Web App Pattern for .NET",
    "description": "A multi-region enterprise web app with a 99.9% SLO and a focus on 12-factor apps and the well-architected framework. The sample app creates a concert booking application.",
    "preview": "./templates/images/reliable-web-app-for-dotnet.png",
    "authorUrl": "https://github.com/Azure",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure/reliable-web-app-pattern-dotnet",
    "tags": [
      "bicep",
      "webapps",
      "enterprisepatterns",
      "msft"
    ],
    "azureServices": [
      "appservice",
      "keyvault",
      "frontdoor",
      "azuresql",
      "appinsights",
      "blobstorage"
    ],
    "id": "81076d3c-f8bb-4653-827c-71854ac4e3ae",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "FastAPI on Azure Container Apps",
    "description": "A simple JSON API using the Python FastAPI app framework, designed for deployment on Azure Container Apps. Includes auto-configuration of gunicorn with uvicorn worker count based on CPUs available.",
    "preview": "./templates/images/simple-fastapi-container.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/simple-fastapi-container",
    "tags": [
      "fastapi",
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "ab71af49-3402-4dd0-858b-d100eae4c83a",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Containerized Apps on Azure Kubernetes Service",
    "description": "A base Azure Kubernetes Service template with placeholders to include the application source code (no application source code included) and Kubernetes manifest files.",
    "preview": "./templates/images/basic-aks-template.png",
    "authorUrl": "https://github.com/sabbour/",
    "author": "Ahmed Sabbour",
    "source": "https://github.com/sabbour/aks-app-template",
    "tags": [
      "bicep",
      "kubernetes",
      "keda",
      "prometheus",
      "community"
    ],
    "azureServices": [
      "aks",
      "grafana"
    ],
    "id": "9dffb7ca-0b35-4d13-bd50-899a904fdac3"
  },
  {
    "title": "React Component Toolkit with ChatGPT and OpenAI ",
    "description": "A sample demo for building and testing react components and includes a set of unique features including AI component generation and automatic conversion to Azure APIM Widgets",
    "preview": "./templates/images/react-component-toolkit-openai.png",
    "authorUrl": "https://github.com/jenny0322",
    "author": "Jenny Chen",
    "source": "https://github.com/Azure-Samples/react-component-toolkit-openai-demo",
    "tags": [
      "bicep",
      "gpt",
      "ai",
      "reactjs",
      "msft"
    ],
    "azureServices": [
      "openai",
      "apim"
    ],
    "id": "2bda5e52-9786-4900-af96-601ff76218e3",
    "languages": [
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Python (Flask) Web App with PostgreSQL",
    "description": "A Python Flask app on App Service with a PostgreSQL flexible server database. Database access is restricted to Azure IPs, and admin password is generated randomly",
    "preview": "./templates/images/flask-db-quiz-example.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/pamelafox/flask-db-quiz-example",
    "tags": [
      "flask",
      "bicep",
      "webapps",
      "community"
    ],
    "azureServices": [
      "appservice",
      "azuredb-postgreSQL"
    ],
    "id": "ae207d42-35cf-420d-b932-2626e7c2bf19",
    "languages": [
      "python"
    ]
  },
  {
    "title": "DotNet Function App with Service Bus",
    "description": "A sample that uses a C# Function App with native Service Bus bindings to both add and react to Queued Messages",
    "preview": "./templates/images/servicebus-dotnet-functionapp.png",
    "authorUrl": "https://github.com/gordonby",
    "author": "Gordon Byers",
    "source": "https://github.com/Gordonby/servicebus-dotnet-functionapp",
    "tags": [
      "bicep",
      "community"
    ],
    "azureServices": [
      "functions",
      "servicebus"
    ],
    "id": "f351c6e5-7cc8-4093-9d07-4d05190a3d6a",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "FastAPI, htmx, TailwindCSS on App Service",
    "description": "A sample web app using FastAPI, htmx, and TailwindCSS that demonstrates dynamic design. Does not require a database provision.",
    "preview": "./templates/images/fastapi-apps-loganalytics.png",
    "authorUrl": "https://github.com/tataraba",
    "author": "Mario Munoz",
    "source": "https://github.com/tataraba/musicbinder-azd",
    "tags": [
      "fastapi",
      "webapps",
      "bicep",
      "community"
    ],
    "azureServices": [
      "appservice",
      "loganalytics"
    ],
    "id": "8fad9861-fabf-4567-823b-ed98be81d611",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Simple Streamlit",
    "description": "A tiny, no-frills, template to deploy Python's Streamlit web framework to Azure App Service in the free tier.",
    "preview": "./templates/images/simple-flask-azd.png",
    "authorUrl": "https://github.com/MiguelElGallo",
    "author": "Miguel P. Z.",
    "source": "https://github.com/MiguelElGallo/simple-streamlit-azd",
    "tags": [
      "streamlit",
      "community"
    ],
    "azureServices": [
      "appservice"
    ],
    "id": "6eef1213-03ed-49ba-937f-c1d471b3775e",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure API Management with Azure OpenAI",
    "description": "Unleash the power of Azure OpenAI to your application developers in a secure & manageable way with Azure API Management.",
    "preview": "./templates/images/apim-openai.png",
    "authorUrl": "https://github.com/pascalvanderheiden",
    "author": "Pascal van der Heiden",
    "source": "https://github.com/pascalvanderheiden/ais-apim-openai",
    "tags": [
      "bicep",
      "ai",
      "enterprisepatterns",
      "community"
    ],
    "azureServices": [
      "apim",
      "openai",
      "appinsights",
      "monitor",
      "keyvault"
    ],
    "id": "7ae56a8e-19c6-44d5-9fa5-ac8defc0a01b"
  },
  {
    "title": "Docusaurus with Azure Container Apps",
    "description": "A blueprint to easily and quickly create and deploy your product documentation in Docusaurus using Azure Container Apps.",
    "preview": "./templates/images/docusaurus-aca-template.png",
    "authorUrl": "https://github.com/jsburckhardt",
    "author": "Juan Burckhardt",
    "source": "https://github.com/jsburckhardt/docusaurus-aca",
    "tags": [
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "11812855-671c-469b-8e31-bf81a9edbb75",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "Java Spring Apps with Azure OpenAI",
    "description": "AI Shopping Cart is a sample app template that supercharges your shopping experience with the power of AI. It leverages Azure OpenAI and Azure Spring Apps to build a recommendation engine that is not only scalable, resilient, and secure, but also personalized to your needs.",
    "preview": "./templates/images/java-springapps-openai.png",
    "authorUrl": "https://github.com/pmalarme",
    "author": "Pierre Malarme",
    "source": "https://github.com/Azure-Samples/app-templates-java-openai-springapps",
    "tags": [
      "spring",
      "ai",
      "reactjs",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "openai",
      "aca",
      "azurespringapps",
      "azuredb-postgreSQL",
      "monitor"
    ],
    "id": "f3d3346b-d621-4ced-9e2c-1b891da214ad",
    "languages": [
      "java"
    ]
  },
  {
    "title": "React Web App with Azure API Management exposing SAP OData APIs",
    "description": "Expose your SAP OData APIs via Azure API Management and link it with Azure Static Web App to create & integrate a serverless Web App blazing fast with GitHub Copilot or ChatGPT.",
    "preview": "./templates/images/apim-odata-reactjs.png",
    "authorUrl": "https://github.com/pascalvanderheiden",
    "author": "Pascal van der Heiden",
    "source": "https://github.com/pascalvanderheiden/ais-apim-odata-reactjs",
    "tags": [
      "bicep",
      "sap",
      "reactjs",
      "gpt",
      "community"
    ],
    "azureServices": [
      "swa",
      "apim",
      "monitor",
      "keyvault",
      "appinsights"
    ],
    "id": "e49261a5-6d65-4f0f-ab39-f747b9f10d9c",
    "languages": [
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Azure OpenAI with Azure Bot and Custom API calling, Behind a Firewall",
    "description": "A Teams Chatbot running behind a Firewall that leverages OpenAI to call private APIs.",
    "preview": "./templates/images/locked-down-bot-openai.png",
    "authorUrl": "https://github.com/graemefoster",
    "author": "Graeme Foster",
    "source": "https://github.com/graemefoster/LockedDownChatBot",
    "tags": [
      "ai",
      "community"
    ],
    "azureServices": [
      "openai",
      "appservice",
      "azurebot",
      "agw"
    ],
    "id": "56053f9b-9406-40be-9a33-842548870d3f",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Hello world Java Application on Azure Spring Apps",
    "description": "A complete hello-world application that includes everything you need to build, deploy, and run an Azure Spring Apps solution.",
    "preview": "./templates/images/asa-helloworld.png",
    "authorUrl": "https://github.com/spring-guides/",
    "author": "Yi Liu",
    "source": "https://github.com/spring-guides/gs-spring-boot-for-azure",
    "tags": [
      "webapps",
      "bicep",
      "spring",
      "community"
    ],
    "azureServices": [
      "azurespringapps"
    ],
    "id": "e7e67e8f-cb48-4cd3-ae54-493aad4faa1a",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Terraform template to bootstrap Azure Deployment Environments",
    "description": "A template to deploy Azure DevCenter with the minimun configuration to start using Azure Deployment Environments and supercharge your platform engineering story. Infrastructure as Code (written in Terraform) will get you started quickly to enable developers to self-serve environments via the Developer Portal, Azure CLI or CI/CD pipelines.",
    "preview": "./templates/images/azure-deployment-environments.png",
    "authorUrl": "https://github.com/lopezleandro03",
    "author": "Leandro Lopez",
    "source": "https://github.com/lopezleandro03/azd-devcenter",
    "tags": [
      "terraform",
      "platformengineering",
      "community"
    ],
    "azureServices": [
      "ade"
    ],
    "id": "9d682481-a26a-4037-8503-32d0fc49e52b"
  },
  {
    "title": "Java - ChatGPT + Enterprise data with Azure OpenAI and AI Search",
    "description": "This repo is the java conversion of the well known chatGPT + Enterprise data code sample originally developed in python",
    "preview": "./templates/images/azure-search-openai-demo-java.png",
    "authorUrl": "https://github.com/dantelmomsft",
    "author": "Davide Antelmo",
    "source": "https://github.com/Azure-Samples/azure-search-openai-demo-java",
    "tags": [
      "spring",
      "ai",
      "semantickernel",
      "reactjs",
      "bicep",
      "msft",
      "aicollection"
    ],
    "azureServices": [
      "aca",
      "openai",
      "appservice",
      "aisearch"
    ],
    "id": "68592edf-9c61-4208-84b0-fd264282af94",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Next.js on Container Apps",
    "description": "A blueprint for getting a Next.js app running on Azure Container Apps with CDN and Application Insights.",
    "preview": "./templates/images/nextjs-aca.png",
    "authorUrl": "https://github.com/CMeeg",
    "author": "Chris Meagher",
    "source": "https://github.com/CMeeg/nextjs-aca",
    "tags": [
      "reactjs",
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca",
      "azurecdn",
      "appinsights"
    ],
    "id": "e8b16cf8-d0c6-4548-a337-1c1ade5b7a0b",
    "languages": [
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "ChatGPT and RAG with Azure OpenAI and AI Search for JavaScript",
    "description": "A reference sample to build Retrieval Augmented Generation applications using Azure AI Search and Azure OpenAI.",
    "preview": "./templates/images/azure-search-openai-javascript.png",
    "authorUrl": "https://github.com/Azure-Samples, https://github.com/anfibiacreativa, https://github.com/shibbas",
    "author": "JavaScript Advocacy Team, Natalia Venditto, Shibani Basava",
    "source": "https://github.com/Azure-Samples/azure-search-openai-javascript",
    "tags": [
      "ai",
      "bicep",
      "gpt",
      "webcomponents",
      "microfrontend",
      "msft",
      "aicollection",
      "rag"
    ],
    "azureServices": [
      "aisearch",
      "openai"
    ],
    "id": "9b2cfe95-02be-4c62-8733-1dab7434b65b",
    "languages": [
      "javascript",
      "nodejs",
      "typescript"
    ]
  },
  {
    "title": "Bicep template to bootstrap Azure Deployment Environments",
    "description": "A template to deploy Azure DevCenter with the minimun configuration to start using Azure Deployment Environments and supercharge your platform engineering story. Infrastructure as Code (written in Bicep) will get you started quickly to enable developers to self-serve environments via the Developer Portal, Azure CLI or CI/CD pipelines.",
    "preview": "./templates/images/azure-deployment-environments.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/azd-deployment-environments",
    "tags": [
      "bicep",
      "platformengineering",
      "msft"
    ],
    "azureServices": [
      "ade"
    ],
    "id": "8a1f4405-43bd-4af5-ad33-23a03a56eaed"
  },
  {
    "title": ".NET eShop on Web App with Redis Cache",
    "description": "A web application hosted in App Services Web App using Redis Cache for shopping cart and session data, and using SQL database for product catelog. Cache aside pattern applied",
    "preview": "./templates/images/webapp-rediscache-sql-vnet.png",
    "authorUrl": "https://github.com/CawaMS",
    "author": "Catherine Wang",
    "source": "https://github.com/CawaMS/eShop",
    "tags": [
      "community"
    ],
    "azureServices": [
      "rediscache",
      "azuresql",
      "appservice"
    ],
    "id": "a8a102d0-621d-4a3f-ba9a-b396c5355a75",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Real time game leaderboard with Azure Container Apps and Redis Cache",
    "description": "Azure container app for a real-time game leaderboard that saves players and scores as sorted set in Azure Cache for Redis",
    "preview": "./templates/images/containerapp-rediscache-leaderboard.png",
    "authorUrl": "https://github.com/CawaMS",
    "author": "Catherine Wang",
    "source": "https://github.com/CawaMS/GameLeaderboard",
    "tags": [
      "community"
    ],
    "azureServices": [
      "aca",
      "rediscache"
    ],
    "id": "de47f514-3e4a-47c4-8a90-6e32228fc1bd",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": ".NET Redis OutputCache with Azure OpenAI",
    "description": "An AI image gallery.Azure Container app that uses Redis Cache to save web responses for improving Azure Open AI API calls performance, consistency, and efficiency",
    "preview": "./templates/images/aca-openai-redis-artgallery.png",
    "authorUrl": "https://github.com/CawaMS",
    "author": "Catherine Wang",
    "source": "https://github.com/CawaMS/OutputCacheOpenAI",
    "tags": [
      "ai",
      "community"
    ],
    "azureServices": [
      "aca",
      "rediscache",
      "openai"
    ],
    "id": "4dba6803-d1c7-4c75-b250-7a679c38a85c",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure OpenAI Conference Session Recommender",
    "description": "Build a recommender using OpenAI, Azure Functions, Azure Static Web Apps, Azure SQL DB, Data API builder and Text Embeddings",
    "preview": "./templates/images/session-recommender-architecture.png",
    "authorUrl": "https://sessionfinder.dotnetconf.net/",
    "author": "Davide Mauri",
    "source": "https://github.com/Azure-Samples/azure-sql-db-session-recommender",
    "tags": [
      "msft",
      "reactjs",
      "enterprisepatterns",
      "ai"
    ],
    "azureServices": [
      "appservice",
      "functions",
      "azuresql",
      "swa",
      "appinsights",
      "openai",
      "azureai"
    ],
    "id": "95b95166-4183-4f4b-94de-15039a7ba3d5"
  },
  {
    "title": "Microservices App - Dapr PubSub Java AKS",
    "description": "Demonstrate event-driven communication between microservices by leveraging the pub/sub messaging architecture using Dapr for a Java application running in an AKS cluster.",
    "preview": "./templates/images/dapr-pubsub-java-aks-diagram.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Mahmut Canga",
    "source": "https://github.com/Azure-Samples/pubsub-dapr-aks-java",
    "tags": [
      "dapr",
      "msft"
    ],
    "azureServices": [
      "aks"
    ],
    "id": "8b4c552b-5538-4929-924f-3dffbc6ce0df",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Azure Functions - Chat using ChatGPT (Node.js JavaScript Function)",
    "description": "This sample shows how to take a ChatGPT prompt as HTTP Get or Post input, calculates the completions using OpenAI ChatGPT service, and then returns the output plus caches in a Blob state store.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/function-javascript-ai-openai-chatgpt",
    "tags": [
      "ai",
      "gpt",
      "msft"
    ],
    "azureServices": [
      "functions",
      "openai"
    ],
    "id": "c8353be4-6a27-4141-8f37-e01268ae3a26",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "Azure Functions - Chat using ChatGPT (Python v2 Function)",
    "description": "This sample shows how to take a ChatGPT prompt as HTTP Get or Post input, calculates the completions using OpenAI ChatGPT service, and then returns the output plus caches in a Blob state store.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/function-python-ai-openai-chatgpt",
    "tags": [
      "ai",
      "gpt",
      "msft"
    ],
    "azureServices": [
      "functions",
      "openai"
    ],
    "id": "2e8d1ced-9837-4c06-92c8-36c3cb91ff86",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Functions - LangChain with Azure OpenAI and ChatGPT (Python v2 Function)",
    "description": "This sample shows how to take a human prompt as HTTP Get or Post input, calculates the completions using chains of human input and templates. This is a starting point that can be used for more sophisticated chains.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/function-python-ai-langchain",
    "tags": [
      "ai",
      "msft"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "56c75a9b-82e2-403f-8bcb-f612ecfb03fd",
    "languages": [
      "python"
    ]
  },
  {
    "title": "GPT-RAG: Enterprise GenAI Chat Accelerator",
    "description": "PT-RAG offers a robust architecture tailored for enterprise-grade deployment of the GenAI Solutions. It ensures grounded responses and is built on Zero-trust security and Responsible AI, ensuring availability, scalability, and auditability. Ideal for organizations transitioning from exploration and PoC stages to full-scale production and MVPs",
    "preview": "./templates/images/GPT-Rag-Architecture-Zero-Trust.png",
    "authorUrl": "https://github.com/Azure",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure/GPT-RAG",
    "tags": [
      "gpt",
      "bicep",
      "ai",
      "msft"
    ],
    "azureServices": [
      "openai",
      "aisearch"
    ],
    "id": "79f4bbff-490c-4919-b187-31b1af47aba4",
    "languages": [
      "python",
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "Blazor Web App with C# and SQL Database on Azure",
    "description": "A starter project for creating a Blazor web app using C# and a SQL database hosted on Azure. The project contains sample application code which can be removed and replaced with your own application code. Add your own source code and leverage the Infrastructure as Code assets (written in Bicep) to get the app up and running quickly.",
    "preview": "./templates/images/azd-blazor.png",
    "authorUrl": "https://jasontaylor.dev",
    "author": "JasonTaylorDev",
    "source": "https://github.com/JasonTaylorDev/azd-blazor",
    "tags": [
      "bicep",
      "blazor",
      "community"
    ],
    "azureServices": [
      "appservice",
      "azuresql",
      "monitor",
      "keyvault"
    ],
    "id": "ab5d4355-6321-4145-a882-f4819cee294d",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Using FastAPI Framework with Azure Functions to serve paginated data from Snowflake",
    "description": "This is a sample Azure Function app created with the FastAPI framework to serve data from Snowflake using pagination",
    "preview": "./templates/images/simple-fastapi-snow-azd.png",
    "authorUrl": "https://github.com/MiguelElGallo",
    "author": "Miguel P. Z.",
    "source": "https://github.com/MiguelElGallo/simple-fastapi-snow-azd",
    "tags": [
      "fastapi",
      "bicep",
      "community"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "d2e36461-54b6-4ff7-be56-f2c0b029732e",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Python (Flask) Web App with MySQL and Key Vault",
    "description": "A Python Flask app on App Service with a MySQL flexible server database. Database access is restricted to Azure IPs, and all administrative secrets are stored in Key Vault.",
    "preview": "./templates/images/flask-db-mysql-example.png",
    "authorUrl": "https://github.com/john0isaac",
    "author": "John Aziz",
    "source": "https://github.com/john0isaac/flask-webapp-mysql-db",
    "tags": [
      "flask",
      "bicep",
      "webapps",
      "community"
    ],
    "azureServices": [
      "appservice",
      "azuredb-mySQL",
      "keyvault"
    ],
    "id": "eef2b875-b618-4978-98a6-d186c4c6113b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Function with Event Hub with optional virtual network capabilities",
    "description": "An Azure Function app which sends events to and consumes from an Event Hub. The Function app can optionally be configured to integrate with a virtual network, and dependent resources configured with virtual network private endpoints. Managed identity is used for authentication to dependent resources.",
    "preview": "./templates/images/function-eventhub-vnet.png",
    "authorUrl": "https://github.com/Azure-Samples/",
    "author": "Michael S. Collier",
    "source": "https://github.com/Azure-Samples/function-eventhub-vnet",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "functions",
      "appinsights",
      "keyvault",
      "eventhub",
      "azurestorage",
      "vnets"
    ],
    "id": "dd8e6d7a-f915-407d-91cf-8543698a2092",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "URL Shortener using Microsoft Orleans and Azure for hosting and data",
    "description": "An ASP.NET Core 8.0 web application to illustrate basic Microsoft Orleans concepts; such as working with Grains, Silos, and persistent state. Uses Azure Developer CLI (azd) to build, deploy, and monitor.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/orleans-url-shortener",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca"
    ],
    "id": "0372fd41-52fb-49b2-9c13-55d1f8ea3182",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure OpenAI priority-based load balancer with Azure Container Apps",
    "description": "A load balancer crafted specifically for Azure OpenAI, which is aware of 'retry-after' headers and intelligently pause traffic when certain OpenAI endpoints reach maximum capacity.",
    "preview": "./templates/images/openai-aca-loadbalancer.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Andre Dewes",
    "source": "https://github.com/Azure-Samples/openai-aca-lb",
    "tags": [
      "ai",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "aca",
      "openai"
    ],
    "id": "0f690ca4-e013-43c7-8848-b4172f321646",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Kubernetes Service Store Demo",
    "description": "Sample microservices app for AKS demos, tutorials, and experiments.",
    "preview": "./templates/images/aks-store-demo.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "AKS Content Team",
    "source": "https://github.com/azure-samples/aks-store-demo",
    "tags": [
      "terraform",
      "ai",
      "msft",
      "kubernetes",
      "helm"
    ],
    "azureServices": [
      "aks",
      "openai"
    ],
    "id": "737e54ad-b7e4-4a27-909b-cc0234f2ebd5"
  },
  {
    "title": "Setting up Azure OpenAI as a central capability within your organization",
    "description": "Unleash the power of Azure AI to all your application developers in a secure & manageable way with Azure API Management and Azure Container Apps, utilizing Azure OpenAI PTUs across your organization with chargeback capabilities.",
    "preview": "./templates/images/enterprise-azureai.png",
    "authorUrl": "https://github.com/Azure, https://github.com/azureholic, https://github.com/iMicknl, https://github.com/pascalvanderheiden",
    "author": "Azure AI Content Team, Remco Brosky, Mick Vleeshouwer, Pascal van der Heiden",
    "source": "https://github.com/Azure/enterprise-azureai",
    "tags": [
      "bicep",
      "ai",
      "enterprisepatterns",
      "msft"
    ],
    "azureServices": [
      "apim",
      "openai",
      "appinsights",
      "monitor",
      "aca"
    ],
    "id": "c5c49771-d402-4b5a-9cdc-5e61292bd5af",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "SAP Cloud SDK on Azure Functions Quickstart (TypeScript)",
    "description": "This repos serves as quick-start project showcasing SAP Cloud SDK for JavaScript OData consumption running on Azure Functions. Its primary purpose is to set you up for success for your SAP extension project on Azure and reduce the lead time to your first successful deployment as much as possible with developer friendly commands.",
    "preview": "./templates/images/functions-javascript-sap-cloud-sdk-quickstart.png",
    "authorUrl": "https://github.com/MartinPankraz, https://github.com/lechnerc77",
    "author": "Martin Pankraz, Christian Lechner",
    "source": "https://github.com/Azure-Samples/functions-javascript-sap-cloud-sdk-quickstart",
    "tags": [
      "bicep",
      "webapps",
      "nestjs",
      "sap",
      "sapcap",
      "msft"
    ],
    "azureServices": [
      "apim",
      "keyvault",
      "appinsights"
    ],
    "id": "160b1ab0-defa-481a-9092-26938a447bb2",
    "languages": [
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "SAP CAP on Azure App Service Quickstart",
    "description": "This repos serves as quick-start project showcasing SAP Cloud Application Programming Model (CAP) for Node.js OData consumption from SAP S/4HANA running on Azure App Services backed with Azure Cosmos DB for PostgreSQL. SAP offers a native module cds-dbs for PostgreSQL integration.",
    "preview": "./templates/images/app-service-javascript-sap-cap-quickstart.png",
    "authorUrl": "https://github.com/MartinPankraz, https://github.com/vobu",
    "author": "Martin Pankraz, Volker Buzek",
    "source": "https://github.com/Azure-Samples/app-service-javascript-sap-cap-quickstart",
    "tags": [
      "bicep",
      "webapps",
      "nestjs",
      "sap",
      "sapcloudsdk",
      "msft"
    ],
    "azureServices": [
      "apim",
      "keyvault",
      "appinsights",
      "cosmosdb",
      "azuredb-postgreSQL"
    ],
    "id": "591868f7-222c-49f8-b2df-bd08d235e40f",
    "languages": [
      "nodejs"
    ]
  },
  {
    "title": "Azure API Management policy for priority-based routing to Azure OpenAI",
    "description": "A load balancer policy crafted specifically for Azure OpenAI, which is aware of 'retry-after' headers and intelligently pause traffic when certain OpenAI endpoints reach maximum capacity.",
    "preview": "./templates/images/openai-apim-loadbalancer.png",
    "authorUrl": "https://github.com/Azure-Samples, https://github.com/codebytes",
    "author": "Andre Dewes, Chris Ayers",
    "source": "https://github.com/Azure-Samples/openai-apim-lb",
    "tags": [
      "ai",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "apim",
      "openai"
    ],
    "id": "087c35ef-edc0-4794-8bf5-51bc265269b0"
  },
  {
    "title": "Langfuse on Azure",
    "description": "Deploy Langfuse (open-source LLM observability platform) to Azure Container Apps with PostgreSQL Flexible Server.",
    "preview": "./templates/images/aca_postgres_keyvault.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/Azure-Samples/langfuse-on-azure",
    "tags": [
      "ai",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "aca",
      "azuredb-postgreSQL",
      "keyvault"
    ],
    "id": "d76ccdef-e735-4891-af13-b54e14f1a3fb"
  },
  {
    "title": "PostgreSQL + Pgvector",
    "description": "Deploy a PostgreSQL Flexible Server with Pgvector extension and keyless auth, then access it from Python scripts.",
    "preview": "./templates/images/postgres_entra.png",
    "authorUrl": "https://github.com/pamelafox",
    "author": "Pamela Fox",
    "source": "https://github.com/Azure-Samples/azure-postgres-pgvector-python",
    "tags": [
      "ai",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "azuredb-postgreSQL"
    ],
    "id": "4d99865e-efff-430f-837e-bc031dbac8a0",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Open AI management and logging via Azure API Management",
    "description": "To use Azure Open AI in production, you need to manage each application and user by issuing new keys, and monitor their usage such as number of tokens they consume and types of endpoint and mode they use. The solution uses Azure APIM and other resources to support such requirements.",
    "preview": "./templates/images/aoai_apim.svg",
    "authorUrl": "https://github.com/microsoft",
    "author": "Kenichiro Nakamura",
    "source": "https://github.com/microsoft/aoai-logging-with-apim",
    "tags": [
      "bicep",
      "msft",
      "ai"
    ],
    "azureServices": [
      "openai",
      "apim",
      "keyvault"
    ],
    "id": "c75a029a-c618-430e-8922-0511bae8a38e",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Remix on Container Apps",
    "description": "A blueprint for getting a Remix app running on Azure Container Apps with CDN and Application Insights.",
    "preview": "./templates/images/remix-aca.png",
    "authorUrl": "https://github.com/CMeeg",
    "author": "Chris Meagher",
    "source": "https://github.com/CMeeg/remix-aca",
    "tags": [
      "reactjs",
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca",
      "azurecdn",
      "appinsights"
    ],
    "id": "4fc85597-77f8-46ca-b035-3cddf6795f4f",
    "languages": [
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": ".NET AI samples with Azure OpenAI",
    "description": ".NET samples demonstrating how to use AI in your .NET applications. Each sample demonstrate a specific AI scenario with only a few lines of code. It consists of a console application, running locally, that will send request(s) to an Azure OpenAI Service deployed in your Azure subscription",
    "preview": "./templates/images/dotnet-ai-samples.png",
    "authorUrl": "https://github.com/fboucher",
    "author": "Frank Boucher",
    "source": "https://github.com/dotnet/ai-samples",
    "tags": [
      "ai",
      "msft",
      "gpt",
      "dall-e",
      "semantickernel",
      "bicep"
    ],
    "azureServices": [
      "openai",
      "azureai"
    ],
    "id": "6e970d12-ce54-4982-bdd0-051925b0acb8",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure OpenAI Conference Session Assistant",
    "description": "Build a conference assistant using using Vector Search and Retrieval Augmented Generator to allow attendees to ask questions about conference in natural language",
    "preview": "./templates/images/session-assistant-architecture.png",
    "authorUrl": "https://ai.lasvegas.vslive.com/",
    "author": "Davide Mauri",
    "source": "https://github.com/Azure-Samples/azure-sql-db-session-recommender-v2",
    "tags": [
      "bicep",
      "msft",
      "reactjs",
      "enterprisepatterns",
      "ai"
    ],
    "azureServices": [
      "appservice",
      "functions",
      "azuresql",
      "swa",
      "appinsights",
      "openai",
      "azureai"
    ],
    "id": "5f01ece6-9734-4a95-b107-3694dbc3f4cd"
  },
  {
    "title": "Simple Flask (Python) Web App (Terraform) on Azure",
    "description": "A simple Python Flask website, made for demonstration purposes only, and deployed to Azure App service and Azure Monitoring.",
    "preview": "./templates/images/flask-app-terraform.png",
    "authorUrl": "https://github.com/john0isaac",
    "author": "John Aziz",
    "source": "https://github.com/john0isaac/simple-flask-app-terraform",
    "tags": [
      "flask",
      "terraform",
      "community"
    ],
    "azureServices": [
      "appservice",
      "loganalytics",
      "monitor",
      "appinsights"
    ],
    "id": "bf5ad7e7-16fc-4389-90ff-21f49a79e8dd",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Dynamic Configuration for AKS workloads (w/o changing ConfigMaps or with Azure App Configuration)",
    "description": "A sample that demonstrates how to dynamically configure an Azure Kubernetes Service (AKS) workload with Azure App Configuration.",
    "preview": "./templates/images/azure-appconfig-aks.png",
    "authorUrl": "https://github.com/Azure/AppConfiguration",
    "author": "Azure App Configuration",
    "source": "https://github.com/Azure-Samples/azure-appconfig-aks",
    "tags": [
      "kubernetes",
      "bicep",
      "webapps",
      "msft"
    ],
    "azureServices": [
      "azureappconfig",
      "aks"
    ],
    "id": "2ec02506-2785-4b99-bcca-0e5c5cc1e4a9",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Chat with your Data Solution Accelerator",
    "description": "A Solution Accelerator for the RAG pattern running in Azure, using Azure AI Search for retrieval and Azure OpenAI large language models to power ChatGPT-style and Q&A experiences. This includes most common requirements and best practices.",
    "preview": "./templates/images/cwyd-solution-architecture.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/chat-with-your-data-solution-accelerator",
    "tags": [
      "bicep",
      "flask",
      "gpt",
      "ai",
      "msft",
      "rag"
    ],
    "azureServices": [
      "aisearch",
      "openai"
    ],
    "id": "3f9352e8-6295-4f72-a214-81d0ca7769de",
    "languages": [
      "python",
      "typescript"
    ]
  },
  {
    "title": "Sample Ruby on Rails app deployed (Bicep) on Azure Container App with PostgreSQL",
    "description": "A sample Ruby on Rails Web App, made for demonstration purposes only, and deployed to Azure Container App and PostgreSQL.",
    "preview": "./templates/images/azure-rails-starter.png",
    "authorUrl": "https://github.com/dbroeglin",
    "author": "Dominique Broeglin",
    "source": "https://github.com/dbroeglin/azure-rails-starter",
    "tags": [
      "rubyonrails",
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca",
      "azuredb-postgreSQL",
      "monitor"
    ],
    "id": "da2e4d30-d499-4a83-8d9d-8b92c5acbd67",
    "languages": [
      "ruby"
    ]
  },
  {
    "title": "RAG using Semantic Kernel with Azure OpenAI and Azure Cosmos DB for MongoDB vCore",
    "description": "A Python sample for implementing retrieval augmented generation using Azure Open AI to generate embeddings, Azure Cosmos DB for MongoDB vCore to perform vector search and semantic kernel. Deployed to Azure App service using Azure Developer CLI (azd).",
    "preview": "./templates/images/rag-semantic-kernel-mongodb-vcore.png",
    "authorUrl": "https://github.com/john0isaac",
    "author": "John Aziz",
    "source": "https://github.com/john0isaac/rag-semantic-kernel-mongodb-vcore",
    "tags": [
      "gpt",
      "mongodb",
      "bicep",
      "ai",
      "community",
      "rag"
    ],
    "azureServices": [
      "openai",
      "cosmosdb"
    ],
    "id": "ab57b3ff-d197-49e8-8f46-c4037a3f70bc",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Serverless ChatGPT with RAG using LangChain.js",
    "description": "A Serverless ChatGPT-like experience with Retrieval-Augmented Generation using LangChain.js, TypeScript and Azure",
    "preview": "./templates/images/serverless-chat-langchainjs.gif",
    "authorUrl": "https://github.com/glaucia86, https://github.com/sinedied",
    "author": "Glaucia Lemos, Yohan Lasorsa",
    "source": "https://github.com/Azure-Samples/serverless-chat-langchainjs",
    "tags": [
      "ai",
      "bicep",
      "gpt",
      "serverlessapi",
      "webcomponents",
      "msft",
      "langchain",
      "aicollection",
      "rag"
    ],
    "azureServices": [
      "openai",
      "cosmosdb",
      "functions",
      "swa",
      "azureai"
    ],
    "id": "10db7027-bc05-450f-8664-a3a9d783cc08",
    "languages": [
      "javascript",
      "nodejs",
      "typescript"
    ]
  },
  {
    "title": ".NET Isolated Azure Function with Zip Deploy",
    "description": "Create a .NET Isolated Azure Function and use Zip Push to deploy the code to the Azure Function App. For example, the .NET 8 code in the repository and the release package are used in the template. Execute the AZD UP command from the deployment folder to deploy the function app. Once the Azure Function is deployed, test it using the URL: https://<functionappname>.azurewebsites.net/api/getadventurers.",
    "preview": "./templates/images/dotnet-azfunc-zipdeploy.png",
    "authorUrl": "https://github.com/fboucher",
    "author": "Frank Boucher",
    "source": "https://github.com/FBoucher/ZipDeploy-AzFunc",
    "tags": [
      "community",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "appinsights",
      "blobstorage"
    ],
    "id": "2ced2b3a-de10-4f8b-9bbf-f30def771837",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure AI Starter",
    "description": "Bicep template that deploys Azure AI services with configured machine learning models.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/azd-ai-starter",
    "tags": [
      "bicep",
      "ai",
      "msft"
    ],
    "azureServices": [
      "azureai",
      "openai"
    ],
    "id": "b1f68267-cf43-4d28-b08c-d55910c2435a"
  },
  {
    "title": "Azure AI Studio Starter",
    "description": "Bicep template that deploys everything you need to get started with Azure AI Studio.  Includes AI Hub with dependent resources, AI project, AI Services and an online endpoint",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/azd-aistudio-starter",
    "tags": [
      "bicep",
      "ai",
      "msft"
    ],
    "azureServices": [
      "azureai",
      "openai"
    ],
    "id": "bbf02030-6f60-40cc-8823-dab89e077451"
  },
  {
    "title": "Simple Chat Application using Azure OpenAI (Python)",
    "description": "Build a chat application using Azure OpenAI GPT models.",
    "preview": "./templates/images/openai-chat-app-quickstart_diagram.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/openai-chat-app-quickstart",
    "tags": [
      "msft",
      "aicollection",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "openai",
      "aca"
    ],
    "id": "aa4f579e-05a3-48be-ac1e-253f54d839b2",
    "languages": [
      "python"
    ]
  },
  {
    "title": "RAG on PostgreSQL",
    "description": "A RAG app to ask questions about rows in a database table. Deployable on Azure Container Apps with PostgreSQL Flexible Server.",
    "preview": "./templates/images/rag-postgres-openai-python-screens_chat.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/rag-postgres-openai-python",
    "tags": [
      "msft",
      "aicollection",
      "bicep",
      "ai",
      "rag"
    ],
    "azureServices": [
      "openai",
      "aca",
      "azuredb-postgreSQL"
    ],
    "id": "952bd229-f367-4875-b95c-5c0c430abe45",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Creative Writing Assistant: Working with Agents using Promptflow (Python Implementation)",
    "description": "A creative writing multi-agent solution to help users write articles.",
    "preview": "./templates/images/agent-openai-python-prompty-creative_writing.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/agent-openai-python-prompty",
    "tags": [
      "msft",
      "aicollection",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "openai",
      "aks",
      "aisearch"
    ],
    "id": "4d1aa700-6936-420a-b853-a3b00124011f",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Process Automation: Speech to Text and Summarization with AI Studio",
    "description": "This solution converts speech to text and then processes and summarizes the text based on the prompt scenario.",
    "preview": "./templates/images/summarization-openai-python-promptflow-architecture-diagram.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/summarization-openai-python-promptflow",
    "tags": [
      "msft",
      "aicollection",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "openai",
      "aca",
      "speechservice"
    ],
    "id": "45d0acf6-4d69-49bd-9b26-5e5e6689a35b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Contoso Chat Retail with Azure AI Studio and Promptflow",
    "description": "This sample has the full End2End process of creating RAG application with Prompt Flow and AI Studio. It includes GPT 3.5 Turbo LLM application code, evaluations, deployment automation with AZD CLI, GitHub actions for evaluation and deployment and intent mapping for multiple LLM task mapping.",
    "preview": "./templates/images/contoso-chat-architecture-diagram.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/contoso-chat",
    "tags": [
      "msft",
      "aicollection",
      "bicep",
      "ai",
      "rag"
    ],
    "azureServices": [
      "openai",
      "aifoundry",
      "cosmosdb",
      "aisearch"
    ],
    "id": "05d97dde-491b-40fe-959f-c8ff19b42e6b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "API Center Analyzer",
    "description": "This sample provides an Azure API Center along with Azure Functions and Azure Event Grid to analyze API specs when registering or updating API specs to Azure API Center.",
    "preview": "./templates/images/apic-analyzer.png",
    "authorUrl": "https://github.com/justinyoo, https://github.com/pierceboggan",
    "author": "Justin Yoo, Pierce Boggan",
    "source": "https://github.com/Azure/APICenter-Analyzer",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "apicenter",
      "functions",
      "eventgrid",
      "managedidentity",
      "appinsights",
      "loganalytics",
      "diagnosticsettings"
    ],
    "id": "dd15c2d8-9d0c-4227-b52d-6adc3b936230",
    "languages": [
      "typescript"
    ]
  },
  {
    "title": "API Center Portal",
    "description": "This sample provides an Azure API Center along with Azure Static Web Apps that governs API specs registered on Azure API Center for developers and stakeholders.",
    "preview": "./templates/images/apic-portal.png",
    "authorUrl": "https://github.com/justinyoo, https://github.com/pierceboggan",
    "author": "Justin Yoo, Pierce Boggan",
    "source": "https://github.com/Azure/APICenter-Portal-Starter",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "apicenter",
      "swa",
      "serviceprincipal"
    ],
    "id": "289b66c8-939c-4a10-9a63-266f196d65fd",
    "languages": [
      "typescript"
    ]
  },
  {
    "title": "API Center Reference Sample",
    "description": "This sample provides an Azure API Center along with Azure App Service, Static Web Apps and Azure Functions that governs, analyzes and performs service discovery of API specs registered on Azure API Center.",
    "preview": "./templates/images/apic-reference.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Justin Yoo",
    "source": "https://github.com/Azure-Samples/APICenter-Reference",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "apicenter",
      "appservice",
      "functions",
      "eventgrid",
      "managedidentity",
      "appinsights",
      "loganalytics",
      "diagnosticsettings",
      "swa",
      "serviceprincipal",
      "logicapps",
      "apim"
    ],
    "id": "9f4c434a-72a5-4577-ab69-04d808d389c2",
    "languages": [
      "dotnetCsharp",
      "typescript"
    ]
  },
  {
    "title": "GPT Video Analysis-In-A-Box",
    "description": "The GPT Video Analysis in-a-Box project leverages Azure OpenAI GPT-4 Turbo with Vision and Azure Data Factory to provide a low-code solution for analyzing images and videos, making AI adoption simpler and more efficient. This solution, part of the AI-in-a-Box framework by Microsoft Customer Engineers and Architects, ensures quality, efficiency, and rapid deployment of AI and ML solutions across various industries.",
    "preview": "./templates/images/gpt4-adf-architecture.jpg",
    "authorUrl": "https://github.com/Azure/AI-in-a-box",
    "author": "AI-in-a-Box Team",
    "source": "https://github.com/Azure-Samples/gpt-video-analysis-in-a-box",
    "tags": [
      "msft",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "openai",
      "cosmosdb",
      "azuredatafactory",
      "blobstorage"
    ],
    "id": "ff769bb8-d642-420a-89da-b5ff0a4c2a62"
  },
  {
    "title": "Deploy Phoenix to Azure",
    "description": "Phoenix provides MLOps and LLMOps insights at lightning speed with zero-config observability.",
    "preview": "./templates/images/arize-phoenix.png",
    "authorUrl": "https://github.com/Arize-ai",
    "author": "Arize AI Team",
    "source": "https://github.com/Arize-ai/phoenix-on-azure",
    "tags": [
      "community",
      "bicep",
      "ai",
      "aicollection"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "2274c45c-6864-47a6-b479-9cb8885eaca0",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Build a Copilot app using Azure Cosmos DB, Azure OpenAI Service and Azure App Service",
    "description": "Build a copilot application with Azure OpenAI Service, Azure Cosmos DB for NoSQL vector database & Azure App Service.",
    "preview": "./templates/images/cosmos-nosql-copilot.png",
    "authorUrl": "https://github.com/AzureCosmosDB",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/AzureCosmosDB/cosmosdb-nosql-copilot",
    "tags": [
      "msft",
      "gpt",
      "bicep",
      "ai",
      "semantickernel",
      "blazor"
    ],
    "azureServices": [
      "openai",
      "cosmosdb",
      "managedidentity",
      "appservice"
    ],
    "id": "361872a4-3321-4d89-8d6e-cd157ce6500d",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Serverless Azure OpenAI Quick Start with LlamaIndex (Python)",
    "description": "This sample shows how to quickly get started with LlamaIndex.ai on Azure. The application is hosted on Azure Container Apps. You can use it as a starting point for building more complex RAG applications.",
    "preview": "./templates/images/llama-index-python-architecture-diagram.png",
    "authorUrl": "https://github.com/run-llama/llama_index",
    "author": "Marlene Mhangami",
    "source": "https://github.com/Azure-Samples/llama-index-python",
    "tags": [
      "msft",
      "gpt",
      "bicep",
      "ai",
      "ai",
      "rag",
      "aicollection"
    ],
    "azureServices": [
      "openai",
      "managedidentity",
      "aca"
    ],
    "id": "7ecf2af4-4784-4bd5-b826-30a99e2682f0",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Serverless App with Angular and MSAL",
    "description": "Azure Serverless Template using Angular-standalone, Azure Functions App, Cosmos DB and APIM",
    "preview": "./templates/images/serverless-application-flow.png",
    "authorUrl": "https://github.com/ryanninodizon",
    "author": "Ryan Niño Dizon",
    "source": "https://github.com/ryanninodizon/AzureServerlessApp-with-auth-for-dotnet-angular",
    "tags": [
      "msal",
      "serverlessapi",
      "angular",
      "community"
    ],
    "azureServices": [
      "apim",
      "functions",
      "cosmosdb"
    ],
    "id": "ef87ec3c-3b34-43c3-920f-16d32130420a",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Pinecone RAG Demo",
    "description": "This example application sets up an Azure container app with Next.js, linking to a Pinecone index and an OpenAI embedding model for storing and retrieving context for a RAG model.",
    "preview": "./templates/images/pinecone-rag-demo-azd.png",
    "authorUrl": "https://pinecone.io",
    "author": "Pinecone Team",
    "source": "https://github.com/pinecone-io/pinecone-rag-demo-azd",
    "tags": [
      "community",
      "pinecone",
      "bicep",
      "nextjs",
      "ai",
      "rag"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "85bacd39-d643-4dda-b670-6f4ea771cc93",
    "languages": [
      "typescript"
    ]
  },
  {
    "title": "Serverless Azure OpenAI Quick Start with LlamaIndex (JavaScript)",
    "description": "This sample shows how to quickly get started with LlamaIndex.ai on Azure. The application is hosted on Azure Container Apps. You can use it as a starting point for building more complex RAG applications.",
    "preview": "./templates/images/llama-index-javascript-architecture-diagram.png",
    "authorUrl": "https://github.com/Azure-Samples/gpt-video-analysis-in-a-box",
    "author": "Wassim Chegham",
    "source": "https://github.com/Azure-Samples/llama-index-javascript",
    "tags": [
      "msft",
      "bicep",
      "ai",
      "rag",
      "aicollection"
    ],
    "azureServices": [
      "openai",
      "aca"
    ],
    "id": "95b73b72-e014-4f01-8ff7-7d7ace9b8b01",
    "languages": [
      "javascript",
      "nodejs"
    ]
  },
  {
    "title": "Azure OpenAI On Your Data with Python Streamlit",
    "description": "Showcase the use of Azure OpenAI's native On Your Data feature and integrates it with Streamlit, a robust framework for developing web applications purely in Python. The goal is to create an MVP for RAG with the most streamlined architecture possible.",
    "preview": "./templates/images/on-your-data-with-streamlit.png",
    "authorUrl": "https://github.com/charliewei0716",
    "author": "Charlie Wei",
    "source": "https://github.com/charliewei0716/on-your-data-with-streamlit",
    "tags": [
      "community",
      "bicep",
      "ai",
      "streamlit",
      "rag"
    ],
    "azureServices": [
      "openai",
      "blobstorage",
      "appservice",
      "aisearch"
    ],
    "id": "37a754db-fbed-44de-b1ad-baba6cf7e390",
    "languages": [
      "python"
    ]
  },
  {
    "title": "NLP to SQL In-A-Box",
    "description": "NLP-SQL-in-a-Box is part of Microsoft's AI-in-a-Box framework, designed to simplify the deployment of AI and ML solutions. This project enables users to interact with SQL databases using natural language and speech, leveraging Azure OpenAI, Semantic Kernel, and Azure AI Speech Service to translate spoken queries into SQL statements, execute them, and deliver results audibly, ensuring an intuitive and user-friendly experience.",
    "preview": "./templates/images/nlp_to_sql_architecture.png",
    "authorUrl": "https://github.com/Azure/AI-in-a-box",
    "author": "AI-in-a-Box Team",
    "source": "https://github.com/Azure-Samples/nlp-sql-in-a-box",
    "tags": [
      "msft",
      "gpt",
      "bicep",
      "ai",
      "semantickernel"
    ],
    "azureServices": [
      "openai",
      "azuresql",
      "speechservice",
      "azureai",
      "managedidentity"
    ],
    "id": "aea29f41-d5d6-4457-bd01-102cb8069a1e",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Blob Data Sharing with Azure Functions Flex Consumption",
    "description": "Construct a high-performance, low-latency data sharing solution between different Azure Storage Accounts using Azure Functions Flex Consumption and the Copy Blob API.",
    "preview": "./templates/images/blob-data-sharing.png",
    "authorUrl": "https://github.com/charliewei0716",
    "author": "Charlie Wei",
    "source": "https://github.com/charliewei0716/blob-data-sharing",
    "tags": [
      "community",
      "bicep"
    ],
    "azureServices": [
      "blobstorage",
      "functions"
    ],
    "id": "c6766aec-94cf-471b-b880-ace4bbb7aced",
    "languages": [
      "python"
    ]
  },
  {
    "title": "RAG using Kernel Memory on Azure",
    "description": "Kernel Memory (KM) is a multi-modal AI Service specialized in the efficient indexing of datasets through custom continuous data hybrid pipelines, with support for Retrieval Augmented Generation (RAG), synthetic memory, prompt engineering, and custom semantic memory processing.",
    "preview": "./templates/images/kernel-memory.png",
    "authorUrl": "https://microsoft.github.io/kernel-memory/",
    "author": "Kernel Memory Team",
    "source": "https://github.com/microsoft/kernel-memory",
    "tags": [
      "msft",
      "ai",
      "bicep",
      "gpt",
      "semantickernel",
      "kernelmemory",
      "promptengineering",
      "rag"
    ],
    "azureServices": [
      "openai",
      "aca",
      "aisearch",
      "azureai",
      "managedidentity",
      "blobstorage",
      "agw",
      "azurestorage",
      "appinsights",
      "vnets"
    ],
    "id": "6d9166fa-5793-485d-a918-19b461ca0260",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Pinecone Assistant sample app",
    "description": "This sample app is designed to get you up and running using Pinecone Assistant quickly. It was developed by engineers at Pinecone to help you deploy your first Assistant-based application in minutes.",
    "preview": "./templates/images/pinecone-assistant-architecture.png",
    "authorUrl": "https://docs.pinecone.io/guides/assistant/understanding-assistant",
    "author": "Pinecone Team",
    "source": "https://github.com/pinecone-io/pinecone-assistant-azd",
    "tags": [
      "community",
      "bicep",
      "pinecone",
      "rag",
      "ai"
    ],
    "id": "205ad993-e5bf-4262-a6a5-17dc8749d7db",
    "languages": [
      "typescript",
      "python"
    ]
  },
  {
    "title": "Azure OpenAI Chat Frontend",
    "description": "Features a Chat-GPT-like user interface, including additional capabilities to debug responses, restyle, revisit history and reset the chat.",
    "preview": "./templates/images/azure-openai-chat-frontend-architecture.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/azure-openai-chat-frontend",
    "tags": [
      "aicollection",
      "msft"
    ],
    "azureServices": [
      "openai",
      "blobstorage",
      "aisearch"
    ],
    "id": "2e20a073-7ed2-44a9-839c-9ca51dddd8e8",
    "languages": [
      "javascript",
      "typescript"
    ]
  },
  {
    "title": "Serverless Azure OpenAI Assistant Quick Start with Function Calling",
    "description": "Allows you to create AI assistants tailored to your needs via custom instructions and tools like code interpreter and custom functions.",
    "preview": "./templates/images/architecture-diagram-assistant-javascript.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/azure-openai-assistant-javascript",
    "tags": [
      "gpt",
      "aicollection",
      "msft"
    ],
    "azureServices": [
      "swa",
      "functions",
      "openai",
      "managedidentity",
      "openai"
    ],
    "id": "698493d2-840a-4225-944c-adce06b74505",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "Chat + Vision using Azure OpenAI",
    "description": "A demonstration of chatting with uploaded images using OpenAI vision models like gpt-4o.",
    "preview": "./templates/images/openai-chat-vision-quickstart-diagram.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/openai-chat-vision-quickstart",
    "tags": [
      "aicollection",
      "msft"
    ],
    "azureServices": [
      "managedidentity",
      "aca",
      "azureai"
    ],
    "id": "42b6c92c-f4d1-4002-923e-ce1d265ef590",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Quote of the Day: Feature Experimentation in .NET with Azure App Configuration",
    "description": "An ASP.NET Core web app that demonstrates A/B testing using Azure App Configuration and the Microsoft Feature Management library.",
    "preview": "./templates/images/quote-of-the-day-diagram.png",
    "authorUrl": "https://github.com/Azure/AppConfiguration",
    "author": "Azure App Configuration",
    "source": "https://github.com/Azure-Samples/quote-of-the-day-dotnet",
    "tags": [
      "msft",
      "featureExperimentation",
      "bicep",
      "featuremanagement"
    ],
    "azureServices": [
      "appinsights",
      "appservice",
      "azureappconfig"
    ],
    "id": "aef3a42a-675e-4821-8a91-2f17e027a2aa",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Hello AZD",
    "description": "A demo template that provides a getting started and welcome experience for the Azure Developer CLI. Run the template to provision and deploy resources to Azure and experiment with a working sample app.",
    "preview": "./templates/images/hello-azd.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Content Team",
    "source": "https://github.com/Azure-Samples/hello-azd",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "blobstorage",
      "aca",
      "cosmosdb",
      "managedidentity"
    ],
    "id": "42520a78-aa7f-49c6-92ed-e7b5713c4d2b",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure OpenAI secure UI starter",
    "description": "Reusable OpenAI secure UI and infrastructure for AI Chat with Azure",
    "preview": "./templates/images/openai-secure-ui-js.gif",
    "authorUrl": "https://github.com/sinedied",
    "author": "Yohan Lasorsa",
    "source": "https://github.com/Azure-Samples/openai-secure-ui-js",
    "tags": [
      "ai",
      "bicep",
      "gpt",
      "serverlessapi",
      "webcomponents",
      "msft",
      "aicollection"
    ],
    "azureServices": [
      "openai",
      "functions",
      "swa",
      "azureai",
      "managedidentity"
    ],
    "id": "bfc3528d-453f-48dd-b450-13e0cc84b49e",
    "languages": [
      "javascript",
      "nodejs",
      "typescript"
    ]
  },
  {
    "title": "RAG using LangChain with Azure OpenAI and Azure Cosmos DB for MongoDB vCore",
    "description": "A Python sample for implementing retrieval augmented generation using Azure Open AI to generate embeddings, Azure Cosmos DB for MongoDB vCore to perform vector search and LangChain. Deployed to Azure App service using Azure Developer CLI (azd).",
    "preview": "./templates/images/rag-langchain-mongodb-vcore.png",
    "authorUrl": "https://github.com/john0isaac",
    "author": "John Aziz",
    "source": "https://github.com/Azure-Samples/Cosmic-Food-RAG-app",
    "tags": [
      "gpt",
      "mongodb",
      "bicep",
      "ai",
      "community",
      "rag",
      "langchain"
    ],
    "azureServices": [
      "openai",
      "cosmosdb"
    ],
    "id": "179f354d-814a-4e5a-b445-244bb227e3be",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Cosmos DB for NoSQL Quickstart - .NET",
    "description": "A quick application to get started using Azure Cosmos DB for NoSQL with the Azure SDK for .NET.",
    "preview": "./templates/images/cosmos-db-nosql-dotnet-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-dotnet",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-nosql-dotnet-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "783418ac-262e-417d-9f7e-0193eec408d2",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Cosmos DB for NoSQL Quickstart - Python",
    "description": "A quick application to get started using Azure Cosmos DB for NoSQL with the Azure SDK for Python.",
    "preview": "./templates/images/cosmos-db-nosql-python-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-python",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-nosql-python-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "e0298977-96b5-4f41-a57c-f3238c5bff43",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Cosmos DB for NoSQL Quickstart - Node.js",
    "description": "A quick application to get started using Azure Cosmos DB for NoSQL with the Azure SDK for Node.js.",
    "preview": "./templates/images/cosmos-db-nosql-nodejs-typescript-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-nodejs",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-nosql-nodejs-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "a134f36d-440e-4300-9359-11945e33bba3",
    "languages": [
      "nodejs"
    ]
  },
  {
    "title": "Azure Cosmos DB for NoSQL Quickstart - Java",
    "description": "A quick application to get started using Azure Cosmos DB for NoSQL with the Azure SDK for Java.",
    "preview": "./templates/images/cosmos-db-nosql-java-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-java",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-nosql-java-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "67254a85-3724-441c-96b5-a4e82f1b575d",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Azure Cosmos DB for NoSQL Quickstart - Go",
    "description": "A quick application to get started using Azure Cosmos DB for NoSQL with the Azure SDK for Go.",
    "preview": "./templates/images/cosmos-db-nosql-go-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/nosql/quickstart-go",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-nosql-go-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "af305758-e11a-44fd-a666-8500d0c3f4af",
    "languages": [
      "go"
    ]
  },
  {
    "title": "Azure Functions C# HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in C# and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd). The sample uses managed identity and a virtual network to make sure deployment is secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-dotnet-azd",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "abb7db72-cb12-45a4-b7e0-93bf219eaadb",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Functions Python HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in Python and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd). The sample uses managed identity and a virtual network to make sure deployment is secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-python-http-azd",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "b2211e06-4c92-4659-8c88-156831f808d8",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Functions Python with SQL Triggers and Bindings using Azure Developer CLI",
    "description": "This repository demonstrates how to use both SQL Triggers and SQL Output Bindings with Azure Functions in Python. Shows event-driven integration with Azure SQL Database using the Azure Developer CLI (azd) for rapid deployment to Azure Functions Flex Consumption.",
    "preview": "./templates/images/functions-quickstart-python-azd-sql.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-python-azd-sql",
    "tags": [
      "msft",
      "bicep",
      "new"
    ],
    "azureServices": [
      "functions",
      "azuresql",
      "appinsights"
    ],
    "id": "1d2dde64-c7c1-4f91-92fe-6b2bd39c6ce5",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Functions JavaScript HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in JavaScript and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd). The sample uses managed identity and a virtual network to make sure deployment is secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-javascript-azd",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "d04fd66f-f5a8-42ce-ac42-b65a65a759b8",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "Azure Functions TypeScript HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in TypeScript and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd). The sample uses managed identity and a virtual network to make sure deployment is secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-typescript-azd",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "918e8160-bd61-40db-b924-3cc404139a19",
    "languages": [
      "typescript"
    ]
  },
  {
    "title": "Azure Functions Java HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in Java and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (AZD). This sample uses managed identity and a virtual network to insure it's secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/azure-functions-java-flex-consumption-azd",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "29b0f634-57ca-4b32-bd53-5d4af5250bda",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Azure Functions PowerShell HTTP Trigger using Azure Developer CLI",
    "description": "This repository contains an Azure Functions HTTP trigger quickstart written in PowerShell and deployed to Azure Functions Flex Consumption using the Azure Developer CLI (AZD). This sample uses managed identity and a virtual network to insure it's secure by default.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-powershell-azd",
    "tags": [
      "powershell",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "appinsights"
    ],
    "id": "018854d1-117c-45d6-a3c8-1f3222b87d26"
  },
  {
    "title": "Doc Intelligence-In-A-Box",
    "description": "The Doc Intelligence in-a-Box project leverages Azure AI Document Intelligence to extract data from PDF forms and store the data in a Azure Cosmos DB. This solution, part of the AI-in-a-Box framework by Microsoft Customer Engineers and Architects, ensures quality, efficiency, and rapid deployment of AI and ML solutions across various industries.",
    "preview": "./templates/images/doc-intelligence-in-a-box.png",
    "authorUrl": "https://github.com/Azure/AI-in-a-box",
    "author": "AI-in-a-Box Team",
    "source": "https://github.com/Azure-Samples/doc-intelligence-in-a-box",
    "tags": [
      "msft",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "cosmosdb",
      "functions",
      "serviceprincipal",
      "logicapps",
      "keyvault",
      "azureai",
      "blobstorage"
    ],
    "id": "b621270f-1212-4852-acf6-ba0700a8c43f"
  },
  {
    "title": "Azure OpenAI keyless deployment",
    "description": "Example Azure OpenAI deployment and RBAC role for your user account for keyless access",
    "preview": "./templates/images/keyless.png",
    "authorUrl": "https://github.com/sinedied",
    "author": "Yohan Lasorsa",
    "source": "https://github.com/Azure-Samples/azure-openai-keyless-js",
    "tags": [
      "ai",
      "bicep",
      "gpt",
      "serverlessapi",
      "msft",
      "aicollection"
    ],
    "azureServices": [
      "openai",
      "azureai",
      "managedidentity"
    ],
    "id": "3f3f82ee-8982-4343-a231-069591a8d531",
    "languages": [
      "javascript",
      "nodejs",
      "typescript"
    ]
  },
  {
    "title": "Order processing workflow with Durable Functions",
    "description": "This repository contains the implementation of an order processing workflow with Durable Functions in C#. The sample is deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd) and is configured with managed identity as the authentication mechanism.",
    "preview": "./templates/images/order-processing-durable-functions.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/Durable-Functions-Order-Processing",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "functions",
      "managedidentity"
    ],
    "id": "48ce5d64-df9b-4546-9ba1-69955e608b98",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Cosmos DB for Table Quickstart - .NET",
    "description": "A quick application to get started using Azure Cosmos DB for Table with the Azure SDK for .NET.",
    "preview": "./templates/images/cosmos-db-table-dotnet-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/table/quickstart-dotnet",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-table-dotnet-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "a03287e5-bc90-4062-8c6b-3b65045d5310",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Azure Cosmos DB for Table Quickstart - Node.js",
    "description": "A quick application to get started using Azure Cosmos DB for Table with the Azure SDK for Node.js.",
    "preview": "./templates/images/cosmos-db-table-nodejs-typescript-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/table/quickstart-nodejs",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-table-nodejs-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "43cd8998-653c-4c97-8ca5-ac463ca88900",
    "languages": [
      "nodejs"
    ]
  },
  {
    "title": "Integration Hub with Logic App Standard",
    "description": "Template to deploy shared components like Logic App Standard Plan, Service Bus and Azure Artifacts for an integration platform.",
    "preview": "./templates/images/integration-hub.png",
    "authorUrl": "https://github.com/marnixcox",
    "author": "Marnix Cox",
    "source": "https://github.com/marnixcox/integration-hub",
    "tags": [
      "community",
      "powershell",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "servicebus",
      "logicapps",
      "keyvault",
      "monitor",
      "appservice"
    ],
    "id": "958495bd-80ef-45b1-828a-ef921a66aeb4",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Logic App Standard and Functions",
    "description": "Template to deploy Logic App Standard and Functions for application integrations.",
    "preview": "./templates/images/logicapp-standard-func.png",
    "authorUrl": "https://github.com/marnixcox",
    "author": "Marnix Cox",
    "source": "https://github.com/marnixcox/logicapp-standard-func",
    "tags": [
      "community",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "logicapps",
      "keyvault",
      "monitor",
      "appservice"
    ],
    "id": "a90195f5-07fa-48a3-a27f-e216de708e11",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Logic App Consumption",
    "description": "Template to deploy Logic App Comsumption for (legacy) application integrations.",
    "preview": "./templates/images/logicapp-standard-func.png",
    "authorUrl": "https://github.com/marnixcox",
    "author": "Marnix Cox",
    "source": "https://github.com/marnixcox/logicapp-consumption",
    "tags": [
      "community",
      "bicep"
    ],
    "azureServices": [
      "logicapps",
      "keyvault",
      "monitor"
    ],
    "id": "c77ef27e-1297-42a6-ac9d-c813060ddfae"
  },
  {
    "title": "Java Quarkus Apps on Azure Container Apps",
    "description": "This repo builds and deploys Java Quarkus applications on Azure Container Apps using the Azure Developer CLI (azd).",
    "preview": "./templates/images/java-quarkus-apps-aca.png",
    "authorUrl": "https://github.com/majguo",
    "author": "Jianguo Ma",
    "source": "https://github.com/Azure-Samples/java-on-aca-quarkus",
    "tags": [
      "quarkus",
      "vuejs",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "aca",
      "azuredb-postgreSQL",
      "azuredb-mySQL",
      "monitor",
      "managedidentity"
    ],
    "id": "cf2b4744-6b65-492a-bb3a-871fdc7a0a6d",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Spring Petclinic Microservices with AI on Azure Container Apps",
    "description": "A Spring Petclinic Microservice with OpenAI running on Azure Container Apps environment, with additional Azure services and Azure Container Apps features.",
    "preview": "./templates/images/java-on-aca.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Songbo Wang",
    "source": "https://github.com/Azure-Samples/java-on-aca",
    "tags": [
      "bicep",
      "msft",
      "aicollection"
    ],
    "azureServices": [
      "aca",
      "azuredb-mySQL",
      "monitor",
      "managedidentity",
      "keyvault",
      "appinsights",
      "openai"
    ],
    "id": "267dd459-3127-4ab0-a0fa-3f3b79f5e734",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Intelligent App on Azure Container Apps and GitHub Models",
    "description": "MarketingWriter is an AI marketing content generation application sample powered by GitHub Models, Azure Container App, Streamlit and Azure Developer CLI (AZD)",
    "preview": "./templates/images/aca-githubmodel-marketingwriter.png",
    "authorUrl": "https://github.com/xuhaoruins",
    "author": "Hao Xu",
    "source": "https://github.com/xuhaoruins/marketingwriter",
    "tags": [
      "streamlit",
      "bicep",
      "community"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "10541f55-54fd-4382-9e2e-88b70e9a7087",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Sprint Petclinic AI application on Azure Container Apps",
    "description": "A chat bot using Generative AI to the Spring Petclinic application, running on Azure Container Apps",
    "preview": "./templates/images/spring-petclinic-ai.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Songbo Wang",
    "source": "https://github.com/Azure-Samples/spring-petclinic-ai",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "aca",
      "managedidentity",
      "openai"
    ],
    "id": "9cb76b7b-c6f2-4742-829f-34765f335457",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Simple Chat App using API Management Gateway and Azure OpenAI",
    "description": "A chat interface that sends messages through API Management Azure OpenAI endpoints implementing load-balancing, circuit breaking and semantic caching, showcasing enterprise-grade API management for AI workloads.",
    "preview": "./templates/images/genai-apim-sample.jpg",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Chris Noring",
    "source": "https://github.com/Azure-Samples/genai-gateway-apim",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "apim",
      "managedidentity",
      "openai"
    ],
    "id": "edb77f4f-ddcc-4ecc-a025-70e3397bea31",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "Multi-tier App with React.js Dashboard Front-End SPA and Backend Node.js API",
    "description": "A multi-tier app with a dashboard front-end (React + Bootstrap) hosted in Azure Static Web Apps and back-end API (Node.js) hosted in Azure App Service",
    "preview": "./templates/images/build5nines-azd-react-bootstrap-dashboard.png",
    "authorUrl": "https://build5nines.com",
    "author": "Build5Nines",
    "source": "https://github.com/Build5Nines/azd-react-bootstrap-dashboard",
    "tags": [
      "community",
      "reactjs",
      "bicep"
    ],
    "azureServices": [
      "appservice",
      "swa",
      "appinsights",
      "loganalytics",
      "monitor",
      "keyvault"
    ],
    "id": "fdddba67-e186-402d-ac95-059c93f05533",
    "languages": [
      "javascript",
      "nodejs"
    ]
  },
  {
    "title": "Jakarta Java EE Cargo Tracker application with Open Liberty running on Azure Kubernetes Service (AKS)",
    "description": "A Jakarta EE based Cargo Tracker application with Open Liberty running on Azure Kubernetes Service (AKS) with Azure Database for PostgreSQL and Azure OpenAI.",
    "preview": "./templates/images/cargotracker-liberty-aks.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Zhihao Guo",
    "source": "https://github.com/Azure-Samples/cargotracker-liberty-aks-azd",
    "tags": [
      "javaee",
      "gpt",
      "ai",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "azuredb-postgreSQL",
      "openai",
      "aks",
      "managedidentity"
    ],
    "id": "84555da7-3f3a-4451-9b10-cb083e481a41",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Advanced multi agent application based on Autogen and Azure Open AI",
    "description": "This repository leverages Microsoft Autogen 0.4, Azure OpenAI and integrates it with Streamlit, to build an end to end multi agents application. this repo makes it easy to build test and deploy an advanced multi agent framework",
    "preview": "./templates/images/dream_team.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Yaniv Vaknin",
    "source": "https://github.com/Azure-Samples/dream-team",
    "tags": [
      "bicep",
      "msft",
      "autogen"
    ],
    "azureServices": [
      "managedidentity",
      "openai",
      "aca",
      "keyvault",
      "loganalytics",
      "appinsights"
    ],
    "id": "1e29650e-c24c-41c0-a037-2c1352c40cc3",
    "languages": [
      "python"
    ]
  },
  {
    "title": "AZD Simple FastAPI app on Azure App Service",
    "description": "A tiny, no-frills, template to deploy Python's FastAPI web framework to Azure App Service in the free tier.",
    "preview": "./templates/images/simple-fastapi-azd.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Renee Noble",
    "source": "https://github.com/Azure-Samples/azd-simple-fastapi-appservice",
    "tags": [
      "fastapi",
      "msft",
      "bicep"
    ],
    "azureServices": [
      "appservice"
    ],
    "id": "5fa2b466-8e1f-48ca-91e0-2e259d89985f",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Data API builder Quickstart - Azure Cosmos DB for NoSQL",
    "description": "A quick application to get started using Data API builder to create a GraphQL API for Azure Cosmos DB for NoSQL.",
    "preview": "./templates/images/dab-azure-cosmos-db-nosql-quickstart.png",
    "authorUrl": "https://github.com/azure-samples",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/dab-azure-cosmos-db-nosql-quickstart",
    "tags": [
      "blazor",
      "dab",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "85c20504-7cd8-4550-bdea-5c300f52c70b",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Data API builder Quickstart - Azure SQL",
    "description": "A quick application to get started using Data API builder to create a REST API for Azure SQL.",
    "preview": "./templates/images/dab-azure-sql-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/data-api-builder/quickstart-azure-sql",
    "author": "Azure SQL Content Team",
    "source": "https://github.com/azure-samples/dab-azure-sql-quickstart",
    "tags": [
      "blazor",
      "dab",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "azuresql",
      "aca",
      "managedidentity"
    ],
    "id": "d8e9bdd8-2874-4e4a-8cf7-3d32b72f9a69",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "LlamaIndex RAG chat app with Azure OpenAI and Azure AI Search (JavaScript)",
    "description": "This solution creates a ChatGPT-like, Retrieval Augmented Generation (RAG) agentic application, over your own documents, powered by Llamaindex (TypeScript). It uses Azure OpenAI Service to access GPT models and embedding, and Azure AI Search for data indexing and retrieval.",
    "preview": "./templates/images/llama-index-vector-search-javascript.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Wassim Chegham",
    "source": "https://github.com/Azure-Samples/llama-index-vector-search-javascript",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "aca",
      "azureai",
      "managedidentity",
      "openai"
    ],
    "id": "ffb0128a-3b8d-4683-8500-bdf7df27da1b",
    "languages": [
      "javascript",
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "Order processing workflow with Durable Functions (Python)",
    "description": "This repository contains the implementation of an order processing workflow with Durable Functions in Python. The sample is deployed to Azure Functions Flex Consumption using the Azure Developer CLI (azd) and is configured with managed identity as the authentication mechanism.",
    "preview": "./templates/images/order-processing-durable-functions.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/durable-functions-order-processing-python",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "azurestorage",
      "blobstorage",
      "vnets",
      "appinsights",
      "loganalytics"
    ],
    "id": "8f5c1792-be93-4d58-bb4d-f1df07c71b91",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Create SharePoint Online webhooks with an Azure function app (Node.js)",
    "description": "A secured Azure function app that connects to your SharePoint Online tenant, to register and manage webhooks, and process the notifications from SharePoint.",
    "preview": "./templates/images/azd-functions-sharepoint-webhooks.png",
    "authorUrl": "https://github.com/Yvand",
    "author": "Yvan Duhamel",
    "source": "https://github.com/Azure-Samples/azd-functions-sharepoint-webhooks",
    "tags": [
      "sharepoint",
      "bicep",
      "msft"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "appinsights"
    ],
    "id": "1d5dcde7-eac8-440f-8b47-dbe9f2d267ba",
    "languages": [
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "Minimal .NET API with ConferenceAPI sample",
    "description": "A minimal .NET API with ConferenceAPI sample",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/ConferenceAPI",
    "tags": [
      "community"
    ],
    "azureServices": [
      "appservice",
      "managedidentity",
      "keyvault",
      "monitor"
    ],
    "id": "934b949c-e03c-49b7-acfb-118b78b1c298"
  },
  {
    "title": "API Management with ConferenceAPI",
    "description": "This scenario deploys an Azure API Management Resource with a Standard SKU, as well as a Conference Demo API Web App, allowing for showing different API calls, as well as using API Management Policies for rate-limit and header-modification + demo Products",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-apimwithconfAPI",
    "tags": [
      "community"
    ],
    "azureServices": [
      "appservice",
      "apim",
      "monitor",
      "managedidentity",
      "keyvault"
    ],
    "id": "1ca6fb57-44a8-4d29-9c0b-43ec4c44bf9a"
  },
  {
    "title": "Azure AI Services with multiple OpenAI models",
    "description": "This scenario deploys an Azure AI Services Resource with multiple OpenAI models, allowing for showing different AI calls, as well as using AI Services for text generation, image generation and more. The deployed models are GPT-3.5-Turbo, GPT-4o, Dall-E-3",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/OpenAIMultiModel",
    "tags": [
      "community"
    ],
    "azureServices": [
      "openai",
      "azureai",
      "monitor"
    ],
    "id": "7fd4210a-d895-43dd-bdb9-28f7c844d0d5"
  },
  {
    "title": "Tollbooth Serverless Architecture with Azure Functions",
    "description": "This scenario deploys the building blocks for a serverless automated parking lot / tollbooth / HOV lanes system using Azure Functions and EventGrid. It also has Azure Storage Account, CosmosDB, Azure KeyVault and Application Insights as part of the architecture.",
    "preview": "./templates/images/tollbooth.png",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/TollBooth",
    "tags": [
      "community",
      "webapps"
    ],
    "azureServices": [
      "keyvault",
      "cosmosdb",
      "appinsights",
      "functions",
      "eventhub",
      "azurestorage"
    ],
    "id": "cbd93796-d7fe-47c8-afd1-2f7860e01e45"
  },
  {
    "title": "Blazor BadgeMaker with Azure AI Services",
    "description": "The BadgeMaker is a Blazor front-end application that provides a user-friendly interface for designing and generating digital badges. It allows users to customize badges with various templates, colors, and text options.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/BadgeMaker",
    "tags": [
      "community",
      "webapps",
      "blazor"
    ],
    "azureServices": [
      "azureai",
      "monitor",
      "azurestorage"
    ],
    "id": "f7599731-0999-4f67-9e3e-1d8edb0d8a81"
  },
  {
    "title": "Azure Machine Learning",
    "description": "This scenario deploys AzureML Service, together with other resources such as Key Vault, Application Insights, Container Registry and the necessary RBAC permissions.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/MachineLearningAZD",
    "tags": [
      "community"
    ],
    "azureServices": [
      "keyvault",
      "appinsights",
      "vnets",
      "managedidentity",
      "azurestorage",
      "keyvault"
    ],
    "id": "af367d42-a059-4e74-b7d6-a3e05f9481b4"
  },
  {
    "title": "EShopOnWeb VM Architecture",
    "description": "This scenario is based on a WebVM and SQLVM architecture, showcasing traditional IAAS in Azure.",
    "preview": "./templates/images/eshoponweb_vm_architecture.png",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/IAAS2019",
    "tags": [
      "community"
    ],
    "azureServices": [
      "monitor",
      "keyvault",
      "vnets"
    ],
    "id": "b9baa1a8-3ccc-47fe-99ad-9dfb6c5be684"
  },
  {
    "title": "EShopOnWeb ACI Architecture",
    "description": "This scenario is deploying Azure Container Instance, with a sample EShopOnWeb Container with .NET8.",
    "preview": "./templates/images/eshoponweb_aci.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "Maarten van Diemen",
    "source": "https://github.com/maartenvandiemen/AZD-ACI-Demo",
    "tags": [
      "community"
    ],
    "azureServices": [
      "managedidentity"
    ],
    "id": "c0a8a207-61b1-4a66-b9bf-efd5910bdc47"
  },
  {
    "title": "EShopOnWeb ACAPPS Architecture",
    "description": "This scenario is deploying Azure Container Apps, with a sample EShopOnWeb Container with .NET8.",
    "preview": "./templates/images/eshoponweb_aca.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "Maarten van Diemen",
    "source": "https://github.com/maartenvandiemen/AZD-ACA-Demo",
    "tags": [
      "community"
    ],
    "azureServices": [
      "aca",
      "managedidentity"
    ],
    "id": "c801b54b-ef8c-4b60-91a5-326399d073cd"
  },
  {
    "title": "EShopOnWeb AKS Architecture",
    "description": "This scenario is based on a Kubernetes (AKS) architecture.",
    "preview": "./templates/images/eshoponweb_aks.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "Maarten van Diemen",
    "source": "https://github.com/maartenvandiemen/AZD-AKS-Demo",
    "tags": [
      "community"
    ],
    "azureServices": [
      "aks",
      "managedidentity",
      "monitor"
    ],
    "id": "b88a6ad2-2084-4fe4-b441-3e8b71dcf292"
  },
  {
    "title": "Azure Cosmos DB for Table Quickstart - Python",
    "description": "A quick application to get started using Azure Cosmos DB for Table with the Azure SDK for Python.",
    "preview": "./templates/images/cosmos-db-table-python-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/table/quickstart-python",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-table-python-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "b9091b21-1948-4912-ad51-466a12201758",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure Cosmos DB for Table Quickstart - Go",
    "description": "A quick application to get started using Azure Cosmos DB for Table with the Azure SDK for Go.",
    "preview": "./templates/images/cosmos-db-table-go-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/table/quickstart-go",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-table-go-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "c7d0d95e-5a3c-43f3-9af1-9a2752f5a68e",
    "languages": [
      "go"
    ]
  },
  {
    "title": "Azure Cosmos DB for Table Quickstart - Java",
    "description": "A quick application to get started using Azure Cosmos DB for Table with the Azure SDK for Java.",
    "preview": "./templates/images/cosmos-db-table-java-quickstart.png",
    "authorUrl": "https://learn.microsoft.com/azure/cosmos-db/table/quickstart-java",
    "author": "Azure Cosmos DB Content Team",
    "source": "https://github.com/azure-samples/cosmos-db-table-java-quickstart",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "cosmosdb",
      "aca",
      "managedidentity"
    ],
    "id": "e6b9ab59-b166-456b-a72b-14acc89ce210",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Azure FrontDoor CDN with sample HTML webapp",
    "description": "This template deploys an Azure FrontDoor CDN, with a sample HTML-based webapp. The webapp allows you to load sample images from different endpoints, one is from within the webapp storage itself, a second one loads from Azure Storage Account Blobs and the last one loads from Azure Frontdoor CDN. This demo shows how static data such as image files can optimize site loading time when using CDN caching.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "petender",
    "source": "https://github.com/petender/azd-fdcdn",
    "tags": [
      "community"
    ],
    "azureServices": [
      "frontdoor"
    ],
    "id": "d2e8d2a8-af7c-43f2-9580-cbccd0a5eb57"
  },
  {
    "title": "EShopOnWeb in Azure App Service and SQL Azure DB",
    "description": "This template deploys the EShopOnWeb .NET 8 application in Azure App Services, connecting to a SQL Azure database instance.",
    "preview": "./templates/images/eshoponweb_paas.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "maartenvandiemen",
    "source": "https://github.com/maartenvandiemen/AZD-PaaS-Demo",
    "tags": [
      "community"
    ],
    "azureServices": [
      "appservice",
      "azuresql"
    ],
    "id": "3fe5335b-c2d3-4226-a8d0-6c7bc92d31d4"
  },
  {
    "title": "Azure Event Hub with Console App",
    "description": "This template deploys Azure Event Hub, as well as runs a local Console app on your machine to interact with Publisher and Subscriber events.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/true-while",
    "author": "true-while",
    "source": "https://github.com/true-while/event-hub-azd",
    "tags": [
      "community"
    ],
    "azureServices": [
      "eventhub"
    ],
    "id": "52a954f8-1b21-4d9a-8851-b42ae168bb96"
  },
  {
    "title": "Hub Spoke with VPN Gateway and JumpVM",
    "description": "This scenario deploys an Azure VNET Hub & Spoke architecture including VNET Peering, VPN Gateway and a Windows Server 2022 JumpVM.",
    "preview": "./templates/images/HubSpokewithJumpVM.png",
    "authorUrl": "https://github.com/petender",
    "author": "petender",
    "source": "https://github.com/petender/azd-hubspoke",
    "tags": [
      "community"
    ],
    "azureServices": [
      "vnets"
    ],
    "id": "9b954e02-8447-44d0-8b5f-ed7802bd88f2"
  },
  {
    "title": "Azure Site 2 Site VPN",
    "description": "This scenario deploys 3 Azure VPN Gateways in 3 different regions (West Europe, Central US and East Asia) and establishes the connections across all 3 of them.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "petender",
    "source": "https://github.com/petender/azd-site2sitevpn/",
    "tags": [
      "community"
    ],
    "azureServices": [
      "vnets"
    ],
    "id": "9a2acebe-8400-48c5-b836-0a7ead8a73b9"
  },
  {
    "title": "Azure Functions with Blob Trigger (Watermark text)",
    "description": "This scenario deploys an Azure Functions App, which provides a Blob Trigger. When an image file is uploaded to the /input container, the Function gets triggered and adds a watermark text to the image file. The new image file getes saved into an /output container. Application Insights is also deployed, so you can showcase the necessary monitoring features of Azure Functions monitor, as well as more detailed in App Insights itself.",
    "preview": "./templates/images/WaterMarkFunction.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "maartenvandiemen",
    "source": "https://github.com/maartenvandiemen/AZD-WatermarkFunction",
    "tags": [
      "community"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "95e9ffd4-58b5-47ac-a6b9-057ad54ef40d"
  },
  {
    "title": "Azure Sentinel with Data Connectors",
    "description": "This scenario deploys an Azure Sentinel workspace, including a few sample data connectors (AWS, M365, Entra Id and LogicApps.",
    "preview": "./templates/images/Sentinel.png",
    "authorUrl": "https://github.com/petender",
    "author": "petender",
    "source": "https://github.com/petender/azd-sentinel",
    "tags": [
      "community"
    ],
    "azureServices": [
      "sentinel"
    ],
    "id": "5a6a8d26-baf4-423f-9750-96bcc8520e39"
  },
  {
    "title": "Azure Traffic Manager with WebApps",
    "description": "This scenario deploys Azure Traffic Manager with WebApps in 3 regions.",
    "preview": "./templates/images/trafficmgr.png",
    "authorUrl": "https://github.com/petender",
    "author": "petender",
    "source": "https://github.com/petender/azd-trafficmgr",
    "tags": [
      "community"
    ],
    "azureServices": [
      "trafficmgr"
    ],
    "id": "9af797ad-ede8-45e3-922c-c878c71efdd3"
  },
  {
    "title": "SpringBoot OpenAI Chat on Azure App Service",
    "description": "The SpringBoot petclinic using Azure OpenAI, Managed Identity, and hosted with Azure App Service. Get up and running with OpenAI on Azure App Service + Java quickly, securely, and easily.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "denverbrittain",
    "source": "https://github.com/Azure-Samples/SpringBoot-Petclinic-AI-Chat-on-App-Service",
    "tags": [
      "msft",
      "bicep",
      "ai",
      "spring"
    ],
    "azureServices": [
      "managedidentity",
      "openai",
      "appservice"
    ],
    "id": "c8d9a65a-282e-4d6d-a1e4-6248952a1e32",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Agentic Voice Assistant based on Azure Container Apps, Azure OpenAI and Azure Logic Apps",
    "description": "This demo deploys a voice based interface to agentic system that uses Azure Logic Apps as the execution mechanism.",
    "preview": "./templates/images/agentic-voice-assistant.png",
    "authorUrl": "https://github.com/Azure-Samples/agentic-voice-assistant",
    "author": "eminkevich",
    "source": "https://github.com/Azure-Samples/agentic-voice-assistant",
    "tags": [
      "ai",
      "chainlit",
      "bicep",
      "community"
    ],
    "azureServices": [
      "cosmosdb",
      "appinsights",
      "azurestorage",
      "aca"
    ],
    "id": "691b7df7-ae12-42a8-9186-d812cc93ad90",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure OpenAI RAG with Java, LangChain4j and Quarkus",
    "description": "Create a Java service using Quarkus, OpenAI SDK, and LangChain4j to build a chatbot that answers questions based on document data, with a website interface for API interaction.",
    "preview": "./templates/images/rag-java-quarkus-langchain4j.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Sandra Ahlgrimm",
    "source": "https://github.com/Azure-Samples/azure-openai-rag-workshop-java",
    "tags": [
      "quarkus",
      "bicep",
      "msft",
      "langchain4j",
      "rag"
    ],
    "azureServices": [
      "aca",
      "managedidentity",
      "openai",
      "monitor"
    ],
    "id": "2d0a9297-4d1f-4e0c-b708-3a9f49967274",
    "languages": [
      "java"
    ]
  },
  {
    "title": "Azure Integration Services Quickstart",
    "description": "Deploys Azure Integration Services, including Azure API Management, Function App, Logic App, Service Bus and Event Hubs namespace, along with supporting resources such as Application Insights, Key Vault and Storage Account. This template is ideal for demos, testing or getting started with Azure Integration Services.",
    "preview": "./templates/images/azure-integration-services-quickstart.png",
    "authorUrl": "https://github.com/ronaldbosma",
    "author": "Ronald Bosma",
    "source": "https://github.com/ronaldbosma/azure-integration-services-quickstart",
    "tags": [
      "bicep",
      "community"
    ],
    "azureServices": [
      "apim",
      "appinsights",
      "azurestorage",
      "eventhub",
      "functions",
      "managedidentity",
      "monitor",
      "keyvault",
      "logicapps",
      "servicebus"
    ],
    "id": "55a520f0-06d1-4856-8820-44cb74a4d92d",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": ".NET Aspire Azure Storage Demo",
    "description": "This project demonstrates how to use Azure Table Storage with a .NET Minimal API in an .NET Aspire solution. Debeing deploy into Azure Container Apps (ACA).",
    "preview": "./templates/images/aspire-az-storage.png",
    "authorUrl": "https://github.com/fboucher",
    "author": "Frank Boucher",
    "source": "https://github.com/FBoucher/AspireAzStorage",
    "tags": [
      "community",
      "aspire",
      "bicep"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "c9e16274-a367-4140-aab1-64bb117d67ba",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Indexing PDFs from blob to ai search with durable functions for RAG Applications",
    "description": "Indexadillo helps you push data to Azure AI Search in a scalable, observable way. Instead of using a pull-based DSL approach, this solution uses Azure Durable Functions to handle everything from parsing your documents to uploading embeddings.",
    "preview": "./templates/images/indexadillo-resources.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Felix Monckemeyer",
    "source": "https://github.com/Azure-Samples/indexadillo",
    "tags": [
      "msft",
      "bicep"
    ],
    "azureServices": [
      "aisearch",
      "azureai",
      "blobstorage",
      "functions"
    ],
    "id": "6b87a038-c8fd-45fd-9362-c98d20cee4ca",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Purview Demo Environment",
    "description": "This deploys Purview, a storage account, Data factory, Synapse, and a SQL Database. It Adds the storage account and database to collections, creates an runs a pipeline, and reports the lineage.",
    "preview": "https://github.com/user-attachments/assets/1f6f3121-a626-40f6-a228-a5153dde579b",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/purviewEnvironment-azd",
    "tags": [
      "community"
    ],
    "azureServices": [
      "purview",
      "azuresql",
      "keyvault",
      "azurestorage",
      "azuredatafactory",
      "managedidentity"
    ],
    "id": "8e467bd5-790a-4409-9c8f-e88c4aa1ce07"
  },
  {
    "title": "Service endpoint, private endpoint and private link service",
    "description": "This is a complete demo for Service endpoint, private endpoint and private link service",
    "preview": "https://github.com/user-attachments/assets/fb691a32-37d0-4144-aa47-86bbd1ff1bb0",
    "authorUrl": "https://github.com/sarahallali",
    "author": "Sarah Allali",
    "source": "https://github.com/sarahallali/azd-Privatelink-Pendpoint",
    "tags": [
      "community"
    ],
    "azureServices": [
      "vnets",
      "azurestorage",
      "virtualmachine"
    ],
    "id": "c8ae6273-0074-497b-9e21-beadb3685ee1"
  },
  {
    "title": "Azure Nested Hypervisor Demos",
    "description": "This repository showcases a collection of demos leveraging Azure's nested hypervisor capabilities, integrating powerful tools like Azure Arc, Defender for Identity, and more. These demos are designed to demonstrate hybrid cloud management, advanced security, and multi-cloud governance scenarios.",
    "preview": "https://raw.githubusercontent.com/koenraadhaedens/azd-nestedhv-dc-rtr/refs/heads/main/media/azure-nested-vm.png",
    "authorUrl": "https://github.com/koenraadhaedens",
    "author": "Koenraad Haedens",
    "source": "https://github.com/koenraadhaedens/azd-nestedhv-dc-rtr",
    "tags": [
      "community"
    ],
    "azureServices": [
      "hyperv",
      "vnets",
      "virtualmachine",
      "azurestorage"
    ],
    "id": "eabd4fa2-7948-4ba5-970d-c7acffe46b1f"
  },
  {
    "title": "Windows 11 Developer Pc",
    "description": "A Windows 11 developer PC that can be used for installing demos and showcasing them during deliveries.",
    "preview": "https://raw.githubusercontent.com/koenraadhaedens/AZD-WIN11-DEV-PC-DOCKER/refs/heads/main/media/devpc.png",
    "authorUrl": "https://github.com/koenraadhaedens",
    "author": "Koenraad Haedens",
    "source": "https://github.com/koenraadhaedens/AZD-WIN11-DEV-PC-DOCKER",
    "tags": [
      "community"
    ],
    "azureServices": [
      "vnets",
      "virtualmachine",
      "azurestorage"
    ],
    "id": "0305a105-f625-4e82-9cd0-4439100818b0"
  },
  {
    "title": "Azure hosted Dev Container",
    "description": "an automated way to deploy a development environment inside a container, accessible as a web-based VS Code instance. The container includes all essential dependencies like Python, Node.js, and .NET, making it a ready-to-use development workspace.",
    "preview": "https://raw.githubusercontent.com/koenraadhaedens/azd-infra-dev-containers/refs/heads/main/media/vscodeweb.png",
    "authorUrl": "https://github.com/koenraadhaedens",
    "author": "Koenraad Haedens",
    "source": "https://github.com/koenraadhaedens/azd-infra-dev-containers",
    "tags": [
      "community"
    ],
    "id": "a84e1301-b2f4-4f0b-9dbb-aaf3f9b5d861"
  },
  {
    "title": "Functions E2E HTTP to Event Hubs",
    "description": "This demo deploys a flexible, consumption-based Azure Functions app integrated with Event Hubs through private endpoints and a virtual network. It includes load testing, secure networking, and real-time monitoring via Application Insights.",
    "preview": "https://raw.githubusercontent.com/rob-foulkrod/tdd-functions-e2e-http-to-eventhubs/main/img/HTTP-VNET-EH.png",
    "authorUrl": "https://github.com/rob-foulkrod",
    "author": "Rob Foulkrod",
    "source": "https://github.com/rob-foulkrod/tdd-functions-e2e-http-to-eventhubs",
    "tags": [
      "community",
      "mongodb"
    ],
    "azureServices": [
      "functions",
      "vnets",
      "azurestorage",
      "cosmosdb",
      "azuresql",
      "keyvault",
      "appservice",
      "appinsights",
      "loganalytics",
      "monitor",
      "eventhub",
      "loadtesting"
    ],
    "id": "ab2e4b2e-5879-4cfe-9a9e-44dce4784599"
  },
  {
    "title": "Azure Security Scenarios",
    "description": "This scenario is used to demonstrate security principals and deploys Azure Firewall, Front Door, Application Gateway, Web Application Firewall to protect OWASP Juice Shop website.",
    "preview": "./templates/images/owasp.png",
    "authorUrl": "https://github.com/true-while",
    "author": "Alex Ivanov",
    "source": "https://github.com/true-while/owasp-azd/",
    "tags": [
      "community"
    ],
    "azureServices": [
      "agw",
      "vnets",
      "virtualmachine"
    ],
    "id": "bf7ed145-d1bf-4f95-98e9-89a1cb3039c2"
  },
  {
    "title": "FastAPI Containerized App on Azure App Service",
    "description": "A simple template to deploy Python containerized FastAPI App to Azure App Service in the free tier.",
    "preview": "./templates/images/simple-fastapi-container-azd.png",
    "authorUrl": "https://github.com/madebygps",
    "author": "Gwyneth Peña-Siguenza",
    "source": "https://github.com/madebygps/azd-simple-fastapi-container-appservice",
    "tags": [
      "fastapi",
      "community",
      "bicep"
    ],
    "azureServices": [
      "appservice",
      "monitor"
    ],
    "id": "02a02124-4966-48af-8479-75d34d2f0f26",
    "languages": [
      "python"
    ]
  },
  {
    "title": "LiteLLM in Azure Container Apps with PostgreSQL database",
    "description": "A template to deploy LiteLLM, open-source Python AI LLM Proxy API, to Azure Container Apps with Azure Database for PostgreSQL.",
    "preview": "./templates/images/build5nines-azd-litellm.png",
    "authorUrl": "https://build5nines.com",
    "author": "Build5Nines",
    "source": "https://github.com/Build5Nines/azd-litellm",
    "tags": [
      "community",
      "bicep",
      "ai"
    ],
    "azureServices": [
      "openai",
      "azuredb-postgreSQL",
      "aca"
    ],
    "id": "db0c39ff-cd8a-45d4-84b3-348aa9e5ae3b",
    "languages": [
      "python"
    ]
  },
  {
    "title": "MCP Server written in TypeScript running in Azure Container Apps",
    "description": "A template to deploy a Model Context Protocol (MCP) server written in TypeScript to Azure Container Apps using SSE Transport.",
    "preview": "./templates/images/powergentic-azd-mcp-ts.png",
    "authorUrl": "https://powergentic.ai",
    "author": "Powergentic",
    "source": "https://github.com/powergentic/azd-mcp-ts",
    "tags": [
      "community",
      "bicep",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "60bd90f8-b04b-46a1-bfa0-f74b0d669375",
    "languages": [
      "nodejs",
      "typescript"
    ]
  },
  {
    "title": "Azure Load Testing",
    "description": "This scenario is used to demonstrate Azure Load Testing.",
    "preview": "./templates/images/azloadtest.png",
    "authorUrl": "https://github.com/maartenvandiemen",
    "author": "Maarten van Diemen",
    "source": "https://github.com/maartenvandiemen/azd-loadtest/",
    "tags": [
      "community"
    ],
    "azureServices": [
      "loadtesting",
      "appservice",
      "appinsights"
    ],
    "id": "701855fd-df76-45ce-82c9-8ef5185b11dc"
  },
  {
    "title": "Azure Storage Account",
    "description": "This scenario is used to demonstrate Azure Storage Account with Blobs and File Share sample data.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-storaccnt/",
    "tags": [
      "community"
    ],
    "azureServices": [
      "blobstorage",
      "azurestorage"
    ],
    "id": "3469bc1d-af3a-4512-86b0-ccb4c0ab8c49"
  },
  {
    "title": "Azure Secured Data Solutions",
    "description": "This scenario is used to demonstrate different Azure Data Solutions, using secured connectivity.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/true-while",
    "author": "Alex Ivanov",
    "source": "https://github.com/true-while/secure-data-solutions/",
    "tags": [
      "community"
    ],
    "azureServices": [
      "azurestorage",
      "keyvault",
      "cosmosdb",
      "azuresql"
    ],
    "id": "28a4a306-e179-4742-8002-b42c56469a60"
  },
  {
    "title": "Remote MCP Functions with TypeScript",
    "description": "This scenario demonstrates how to to easily build and deploy a custom remote MCP (Message Control Protocol) server to the cloud using Azure functions and TypeScript.",
    "preview": "./templates/images/azure-functions-mcp-server-typescript.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/remote-mcp-functions-typescript",
    "tags": [
      "bicep",
      "msft",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "d7da481d-769d-4a79-aba6-9370acc41c2a",
    "languages": [
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "Remote MCP Functions with .NET",
    "description": "This scenario demonstrates how to to easily build and deploy a custom remote MCP (Message Control Protocol) server to the cloud using Azure functions and .NET.",
    "preview": "./templates/images/azure-functions-mcp-server-dotnet.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/remote-mcp-functions-dotnet",
    "tags": [
      "bicep",
      "msft",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "5276cdee-61d6-49a5-add1-2c5693e6577c",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Remote MCP Functions with Python",
    "description": "This scenario demonstrates how to to easily build and deploy a custom remote MCP (Message Control Protocol) server to the cloud using Azure functions and Python.",
    "preview": "./templates/images/azure-functions-mcp-server-python.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Paul Yuknewicz",
    "source": "https://github.com/Azure-Samples/remote-mcp-functions-python",
    "tags": [
      "bicep",
      "msft",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "functions"
    ],
    "id": "e11bb59e-5df9-4fa7-8839-7bc5c384a6ff",
    "languages": [
      "python"
    ]
  },
  {
    "title": ".NET + Semantic Search - eShopLite",
    "description": "eShopLite - Semantic Search is a reference .NET application implementing an eCommerce site with Search features using Keyword Search and Semantic Search.",
    "preview": "./templates/images/eshop-semanticsearch.png",
    "authorUrl": "https://twitter.com/elbruno",
    "author": "Bruno Capuano",
    "source": "https://github.com/Azure-Samples/eShopLite-SemanticSearch",
    "tags": [
      "bicep",
      "ai",
      "msft"
    ],
    "azureServices": [
      "managedidentity",
      "openai",
      "loganalytics"
    ],
    "id": "f9dd77f7-0a8d-4025-9785-fb3d8fdb7198",
    "languages": [
      "dotnetCsharp",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": ".NET + Semantic Search + AI Search - eShopLite",
    "description": "eShopLite - Semantic Search - Azure AI Search is a reference .NET application implementing an eCommerce site with Search features using Keyword Search with SQL queries, and Semantic Search with Vector Database and Azure AI Search.",
    "preview": "./templates/images/eshop-semanticsearch-aisearch.png",
    "authorUrl": "https://twitter.com/elbruno",
    "author": "Bruno Capuano",
    "source": "https://github.com/Azure-Samples/eShopLite-SemanticSearch-AzureAISearch",
    "tags": [
      "bicep",
      "ai",
      "msft"
    ],
    "azureServices": [
      "managedidentity",
      "aisearch",
      "azuresql",
      "openai",
      "loganalytics"
    ],
    "id": "92a49f6d-772c-4d40-ac4e-6dbbb29a7320",
    "languages": [
      "dotnetCsharp",
      "typescript",
      "javascript"
    ]
  },
  {
    "title": "RAG on Neon Serverless Postgres",
    "description": "This project creates a web-based chat application with an API backend that leverages Azure OpenAI chat models to answer questions using Neon Serverless Postgres. The frontend is built with React and FluentUI, while the backend is written in Python (FastAPI).",
    "preview": "./templates/images/rag-neon-azure-architecture-diagram-v1.png",
    "authorUrl": "https://neon.tech/demos",
    "author": "Bobur Umurzokov",
    "source": "https://github.com/neondatabase-labs/rag-neon-postgres-openai-azure-python",
    "tags": [
      "gpt",
      "neondb",
      "bicep",
      "ai",
      "community",
      "rag"
    ],
    "azureServices": [
      "openai"
    ],
    "id": "ffe86fd0-7394-4c28-a1ce-9ae7115254cc",
    "languages": [
      "python",
      "javascript"
    ]
  },
  {
    "title": "Multi-tenant RAG Chat in Azure: Vector store per user",
    "description": "RAG Chat example on Azure creates one Neon database project per user, each user's data will be completely isolated.",
    "preview": "./templates/images/rag-neon-vector-store-per-user.png",
    "authorUrl": "https://neon.tech/demos",
    "author": "Bobur Umurzokov",
    "source": "https://github.com/neondatabase-labs/azure-tenant-ai-chat",
    "tags": [
      "gpt",
      "neondb",
      "bicep",
      "ai",
      "community",
      "rag"
    ],
    "azureServices": [
      "openai"
    ],
    "id": "6ea9084f-92cb-4e70-bece-608138754978",
    "languages": [
      "javascript",
      "typescript",
      "nodejs"
    ]
  },
  {
    "title": "Remote MCP Servers using Azure API Management",
    "description": "This repo builds and deploys remote MCP servers using Azure API Management as your auth gateway and Azure Functions as your deployment location.",
    "preview": "./templates/images/remote-mcp-apim-auth.png",
    "website": "https://github.com/Azure-Samples",
    "author": "Julia Kasper",
    "source": "https://github.com/Azure-Samples/remote-mcp-apim-functions-python",
    "tags": [
      "bicep",
      "msft",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "apim",
      "functions"
    ],
    "id": "d31149d5-3c9a-47d5-9f28-629890dbe1f2",
    "languages": [
      "python"
    ]
  },
  {
    "title": "MCP Server written in C# running in Azure Container Apps",
    "description": "A template to deploy a Model Context Protocol (MCP) server written in C# to Azure Container Apps using SSE Transport.",
    "preview": "./templates/images/powergentic-azd-mcp-csharp.png",
    "website": "https://powergentic.ai",
    "author": "Powergentic",
    "source": "https://github.com/powergentic/azd-mcp-csharp",
    "tags": [
      "community",
      "bicep",
      "ai",
      "mcp"
    ],
    "azureServices": [
      "aca"
    ],
    "id": "2912362d-7bf2-4091-8910-d6e22fd76618",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "This template helps you quickly publish a static website to Azure Web App (Static Site).",
    "description": "The template is designed to simplify the process of deploying static websites to Azure, leveraging the Azure Developer CLI (azd) for streamlined setup and deployment.",
    "preview": "./templates/images/staticSite.png",
    "website": "https://github.com/erudinsky",
    "author": "Evgeny Rudinsky",
    "source": "https://github.com/erudinsky/azd-static-web-vuejs",
    "tags": [
      "vuejs",
      "bicep",
      "community"
    ],
    "azureServices": [
      "swa"
    ],
    "id": "ce524ab6-db44-48c6-a299-daa462987ad0"
  },
  {
    "title": "Deploy DeepSeek-R1 on Azure Container Apps with Serverless GPUs.",
    "description": "This scenario deploys deploy DeepSeek-R1 on Azure Container Apps with Serverless GPUs",
    "preview": "./templates/images/deepseekr1.jpg",
    "website": "https://github.com/daverendon",
    "author": "Dave Rendon",
    "source": "https://github.com/daverendon/azd-deepseek-r1-on-azure-container-apps",
    "tags": [
      "community"
    ],
    "azureServices": [
      "loganalytics",
      "aca"
    ],
    "id": "16dde382-f20b-4c29-ad9b-e11ea0be715e"
  },
  {
    "title": "YouTube Summarizer with OpenAI and Blazor .NET",
    "description": "This scenario deploys a Blazor .NET FrontEnd application, together with Azure OpenAI Service, to provide a summary of YouTube videos in 5 bullet points",
    "preview": "./templates/images/YoutubeSummarizer.png",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-youtubesummarizer-openai",
    "tags": [
      "community"
    ],
    "azureServices": [
      "azureai",
      "managedidentity",
      "openai"
    ],
    "id": "c8a63813-80dc-435f-ba93-e5d82ed5a2b2"
  },
  {
    "title": "Vite + Lit AI Chat UI Starter",
    "description": "A ready-to-integrate chat interface template using Vite and Lit for AI-powered conversations.",
    "preview": "./templates/images/vite-lit-ai-chat-interface.png",
    "website": "https://github.com/juliamuiruri4",
    "author": "Julia Muiruri",
    "source": "https://github.com/Azure-Samples/vite-chat-interface",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "swa"
    ],
    "id": "cbb98c98-07f3-4cc8-a361-00c8e6895018",
    "languages": [
      "javascript"
    ]
  },
  {
    "title": "International Space Station (ISS) Tracker with Fabric and Event Hubs",
    "description": "This scenario deploys an Azure Fabric Cluster with a sample application that tracks the International Space Station (ISS) using Azure Event Hubs and Azure LogicApps.",
    "preview": "./templates/images/test.png",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/issdata",
    "tags": [
      "community",
      "new",
      "fabric"
    ],
    "azureServices": [
      "eventhub"
    ],
    "id": "8f0eb1ed-2f29-4d40-b197-08859b1dd2db"
  },
  {
    "title": "Deploy a baseline web application",
    "description": "This repository provides a baseline for deploying web applications with Deployment Slots, Azure SQL Connectivity and KeyVault.",
    "preview": "./templates/images/baseline-webapp.png",
    "website": "https://github.com/daverendon",
    "author": "Dave Rendon",
    "source": "https://github.com/daverendon/azd-baseline-webapp",
    "tags": [
      "community"
    ],
    "azureServices": [
      "appservice",
      "loganalytics",
      "azuresql",
      "keyvault",
      "appservice"
    ],
    "id": "2a093492-1042-48ba-a67e-fab226d25c59"
  },
  {
    "title": "Cognitive Services Python App with ServiceEndpoint",
    "description": "This sample scenario deploys Microsoft.CognitiveServices (Face API, Speech, Vision, OpenAI) with a sample Python app. It also showcases a secure setup, where connectivity to the Cognitive Services is only allowed from a Client IP or the webapp Service Endpoint, not public network.",
    "preview": "./templates/images/azd-vision-face-diagram.png",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-vision-face",
    "tags": [
      "community"
    ],
    "azureServices": [
      "appservice",
      "vnets",
      "openai"
    ],
    "id": "64073610-c2b2-4bc4-8b4f-4f497bbcbd12",
    "languages": [
      "python"
    ]
  },
  {
    "title": "Azure SQL w/ Azure OpenAI Blazor chat app on Azure App Service",
    "description": "Create a .NET Blazor chat app with Azure SQL data using a hybrid vector search and Azure OpenAI.",
    "preview": "./templates/images/test.png",
    "authorUrl": "https://github.com/jeffwmartinez",
    "author": "Jeff Martinez",
    "source": "https://github.com/Azure-Samples/blazor-azure-sql-vector-search",
    "tags": [
      "msft",
      "bicep",
      "ai",
      "rag",
      "semantickernel"
    ],
    "azure_service": [
      "managedidentity",
      "openai",
      "appservice",
      "azuresql"
    ],
    "id": "7e574780-0f87-42e8-af8c-5e8cb7d3540a",
    "language": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "C# API App with Swagger UI deployed to Azure App Service",
    "description": "A simple C# .NET 9 API app with Swagger UI deployed to Azure App Service. The app is a simple REST API with 'TODO' endpoints as a starting point for your own API app.",
    "preview": "./templates/images/build5nines-azd-csharp-api-swagger.png",
    "website": "https://build5nines.com",
    "author": "Build5Nines",
    "source": "https://github.com/Build5Nines/azd-csharp-api-swagger",
    "tags": [
      "community",
      "bicep"
    ],
    "azureServices": [
      "appservice"
    ],
    "id": "faab6d9e-ce20-41b0-bdf6-f4acc9741763",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "AI-Powered Code Snippet Manager with Azure Functions and MCP",
    "description": "Build a modern code snippet management system using an MCP server built on Azure Functions with bindings to Cosmos DB DiskANN vector search and AI Agents Service for deep wiki and code style generation. This solution enables intelligent code snippet discovery and reuse through GitHub Copilot integration.",
    "preview": "./templates/images/snippy-architecture.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Govind Kamtamneni",
    "source": "https://github.com/Azure-Samples/snippy",
    "tags": [
      "bicep",
      "msft",
      "ai"
    ],
    "azureServices": [
      "functions",
      "aifoundry",
      "openai",
      "cosmosdb",
      "azureai",
      "fabric"
    ],
    "languages": [
      "python"
    ],
    "id": "865306bb-9213-4037-9dae-4bf001f457d2"
  },
  {
    "title": "Azure VM Win2022 as ADDS Domain Controller, secured by Bastion",
    "description": "This scenario deploys an Azure Bastion Host Service, allowing secured connectivity to a Windows Server 2022 running as Active Directory Domain Controller, deployed through DSC VM Extensions. An internal DNS domain gets created, but no other OUs or User accounts. You will get prompted for administrative credentials during the azd setup.",
    "preview": "./templates/images/addsvm_with_bastion.png",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-addsvm",
    "tags": [
      "community"
    ],
    "azureServices": [
      "virtualmachine",
      "vnets",
      "bastion"
    ],
    "id": "d9af81f9-ffb7-4047-807a-412651b776da"
  },
  {
    "title": "SQL Server 2019 AlwaysOn Cluster with ADDS VM and Management VM, secured by Bastion",
    "description": "This scenario deploys a SQL Server 2019 Always On Cluster, together with the required Active Directory Domain Controller VM, a remote Management VM Host, protected by Bastion Host. You will get prompted for administrative credentials during the azd setup.",
    "preview": "./templates/images/SQLAO_with_Bastion.png",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-sqlao",
    "tags": [
      "community"
    ],
    "azureServices": [
      "virtualmachine",
      "bastion",
      "vmsqlserver",
      "avset"
    ],
    "id": "e4909150-dce8-4854-a2bf-b0e051893413"
  },
  {
    "title": ".NET OpenAI MCP Agent",
    "description": "This is an MCP agent app written in .NET, using Azure OpenAI, with a remote MCP server written in TypeScript.",
    "preview": "./templates/images/openai-mcp-agent-dotnet.png",
    "authorUrl": "https://github.com/justinyoo",
    "author": "Justin Yoo",
    "source": "https://github.com/Azure-Samples/openai-mcp-agent-dotnet",
    "tags": [
      "msft",
      "bicep",
      "ai",
      "mcp",
      "blazor"
    ],
    "azureServices": [
      "aca",
      "azureai",
      "openai",
      "loganalytics",
      "managedidentity",
      "appinsights",
      "diagnosticsettings"
    ],
    "id": "7157a845-772d-4f21-a071-cb118fd09354",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Aspire with Key Vault + App Config + Service Bus/RabbitMQ",
    "description": "Containerized ASP.NET apps with Key Vault, App Config and Service Bus and orchestrated using Aspire. Supports completely disconnected local development using RabbitMQ",
    "preview": "./templates/images/azd-aspire-basic.png",
    "authorUrl": "https://github.com/fabio-marini",
    "author": "Fabio Marini",
    "source": "https://github.com/fabio-marini/azd-aspire-basic",
    "tags": [
      "bicep",
      "community",
      "new",
      "aspire"
    ],
    "azureServices": [
      "keyvault",
      "azureappconfig",
      "servicebus",
      "webapps",
      "serviceprincipal",
      "aca",
      "loganalytics",
      "managedidentity"
    ],
    "id": "6d1f791c-5216-43aa-a5be-574fa3e0fa16",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "Windows 2019 IIS Servers with Load Balancer",
    "description": "This scenario deploys 2 Win2019 VMs running IIS Default WebSite, behind a Load Balancer and required Network Security Group rules.",
    "preview": "./templates/images/vmwithlb.png",
    "website": "https://github.com/trainerkrunal",
    "author": "Krunal Trivedi",
    "source": "https://github.com/trainerkrunal/azd-vmwithlb",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "virtualmachine",
      "vnets"
    ],
    "id": "f08ac122-43dc-427c-89c1-487c512997d9"
  },
  {
    "title": "Service Endpoints and Securing Storage",
    "description": "This demo guides you through a hands-on exercise to build and secure a networked environment in Azure. You will start by creating a virtual network and adding a subnet with a configured storage endpoint. Next, you will implement network security groups. Following this, you will create a storage account with a file share and deploy virtual machines into their respective subnets. Finally, you will test the storage connection from both the private and public subnets to verify that access is correctly allowed from the private subnet and denied from the public subnet.",
    "preview": "./templates/images/diagram-service-endpoints-and-securing-storage.png",
    "website": "https://github.com/daverendon",
    "author": "Dave Rendon",
    "source": "https://github.com/daverendon/azd-service-endpoints-and-securing-storage",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "azurestorage",
      "vnets",
      "virtualmachine"
    ],
    "id": "64364f59-8884-4f61-8b35-3ed011b9ee6b"
  },
  {
    "title": "Implement Intersite Connectivity with Azure VMs",
    "description": "This scenario set up and test global VNet peering, configures intersite connectivity with multiple VMs.",
    "preview": "./templates/images/diagram-intersite-connectivity.png",
    "website": "https://github.com/daverendon",
    "author": "Dave Rendon",
    "source": "https://github.com/daverendon/azd-intersite-connectivity",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "vnets",
      "virtualmachine"
    ],
    "id": "0334e348-f635-40c6-851d-67402679bd2c"
  },
  {
    "title": "Fast Food Drive thru Operator Ai Agent with Semantic Kernel and GPT 3.5 Turbo",
    "description": "This AI-powered Fast Food Drive-Thru Operator leverages Semantic Kernel and Azure OpenAI GPT-3.5 turbo to streamline customer interactions, improve efficiency, and automate order processing.",
    "preview": "./templates/images/michelmsft_GoodFood.png",
    "website": "https://github.com/michelmsft",
    "author": "Michel Agah",
    "source": "https://github.com/michelmsft/GoodFood/",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "languages": [
      "dotnetCsharp"
    ],
    "azureServices": [
      "semantickernel",
      "openai",
      "azureai",
      "cosmosdb"
    ],
    "id": "c70f20a9-25e0-451c-838a-c33a7e2ed943"
  },
  {
    "title": "Azure App Configuration",
    "description": "Demo to show possibilities of Azure App Configuration",
    "preview": "./templates/images/AZD-AppConfiguration_mvd.png",
    "website": "https://github.com/maartenvandiemen",
    "author": "Maarten van Diemen",
    "source": "https://github.com/maartenvandiemen/AZD-AppConfiguration",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "functions",
      "azureappconfig"
    ],
    "languages": [
      "dotnetCsharp"
    ],
    "id": "39b30820-7291-4dfa-907e-10eaba4b9d84"
  },
  {
    "title": "Utilize Private Link for accessing apps on networks with overlapping addresses",
    "description": "This scenario is aligned with the Az-104 and Az-700 path and provides a demo solution for managing overlapping IP address spaces with Azure Private Link.",
    "preview": "./templates/images/diagram-private-link.png",
    "website": "https://github.com/daverendon",
    "author": "Dave Rendon",
    "source": "https://github.com/daverendon/azd-private-link",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "azurestorage",
      "azureappconfig",
      "functions",
      "managedidentity"
    ],
    "id": "9e7ee586-fde1-467d-8555-3b2aad3cdbea"
  },
  {
    "title": "Azure SQL Workload Simulator Demo",
    "description": "This project sets up an Azure environment with a SQL workload simulator, After 24 hrs you will be able to demo Azure SQL Database Performance Recommendations.",
    "preview": "./templates/images/sql_workload_simulator.png",
    "website": "https://github.com/koenraadhaedens",
    "author": "Koenraad Haedens",
    "source": "https://github.com/koenraadhaedens/azd-sqlworloadsim",
    "tags": [
      "community",
      "new",
      "bicep"
    ],
    "azureServices": [
      "azuresql",
      "keyvault",
      "virtualmachine",
      "vnets"
    ],
    "id": "4c901c4a-bd10-45e1-a6b2-e34a4248041e"
  },
  {
    "title": "Azure Functions C# Event Grid Blob Trigger using Azure Developer CLI",
    "description": "This template repository contains a Blob trigger with the Event Grid source type reference sample for functions written in C# (isolated process mode) and deployed to Azure using the Azure Developer CLI (azd).",
    "preview": "./templates/images/azure-functions-eventgrid-blob-csharp.png",
    "authorUrl": "https://github.com/Azure-Samples",
    "author": "Azure Functions Team",
    "source": "https://github.com/Azure-Samples/functions-quickstart-dotnet-azd-eventgrid-blob",
    "tags": [
      "msft",
      "bicep",
      "new"
    ],
    "azureServices": [
      "functions",
      "managedidentity",
      "vnets",
      "blobstorage",
      "eventgrid",
      "appinsights"
    ],
    "id": "7932e353-5974-4a4f-9956-259bb5e1c64a",
    "languages": [
      "dotnetCsharp"
    ]
  },
  {
    "title": "AZ-104 All-in-one demo",
    "description": "This project sets up an Azure environment for AZ-104 course demo purposes.",
    "preview": "https://github.com/SQLtattoo/azd-az104-all-in-one/blob/master/demoguide/images/az104allinone-diagram.png?raw=true",
    "website": "https://github.com/SQLtattoo",
    "author": "Vassilis Ioannidis",
    "source": "https://github.com/SQLtattoo/azd-az104-all-in-one",
    "tags": [
      "community",
      "new"
    ],
    "azureServices": [
      "virtualmachine",
      "agw",
      "loadbalancer",
      "vnets",
      "privatelink",
      "keyvault"
    ],
    "id": "c893c207-13dd-4bf9-b471-d96b4c67009a"
  },
  {
    "title": "Azure AI Foundry Agent Service",
    "description": "This scenario deploys an Azure AI Foundry Hub and Project, as well as an AI Services Agent. You still need to add an Agent description, knowledge and actions to build something useful with it",
    "preview": "https://github.com/petender/azd-ai-agent-service/blob/main/demoguide/AIFoundrywithAgent.png?raw=true",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-ai-agent-service",
    "tags": [
      "new",
      "community"
    ],
    "azureServices": [
      "azureai",
      "aifoundry",
      "openai"
    ],
    "id": "b00a6197-ad6d-4c99-b2a8-5e18da8ecb49"
  },
  {
    "title": "Azure AI Foundry with Sora Video Generation Model",
    "description": "This scenario deploys an Azure AI Foundry Hub and Project, with the Sora Video Generation Model. The demo scenario relies on the Video Playground, but you could also use it in your own application.",
    "preview": "https://github.com/petender/azd-foundrysora/blob/main/demoguide/AIFoundrywithSora.png?raw=true",
    "website": "https://github.com/petender",
    "author": "Peter De Tender",
    "source": "https://github.com/petender/azd-foundrysora",
    "tags": [
      "new",
      "community"
    ],
    "azureServices": [
      "azureai",
      "aifoundry",
      "openai"
    ],
    "id": "9150216e-8078-4796-945f-a28e7b754a90"
  },
  {
    "title": "Azure Functions with SQL Triggers and Bindings (.NET)",
    "description": "An Azure Functions QuickStart project that demonstrates how to use both SQL Triggers and SQL Output Bindings with the Azure Developer CLI (azd) for rapid, event-driven integration with Azure SQL Database.",
    "preview": "./templates/images/functions-quickstart-dotnet-azd-sql.png",
    "authorUrl": "https://github.com/Azure/azure-dev",
    "author": "Azure Dev",
    "source": "https://github.com/Azure-Samples/functions-quickstart-dotnet-azd-sql",
    "tags": [
      "bicep",
      "msft"
    ],
    "azureServices": [
      "functions",
      "azuresql",
      "monitor"
    ],
    "id": "d6f09cec-111b-43f4-aa56-46faf5827df6",
    "languages": [
      "dotnetCsharp"
    ]
  }
]
